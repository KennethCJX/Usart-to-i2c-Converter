
Uart_to_I2C_Converter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003738  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080038d0  080038d0  000138d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003910  08003910  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003910  08003910  00013910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003918  08003918  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003918  08003918  00013918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000000c  0800392c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  0800392c  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4d5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cba  00000000  00000000  0002b511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002d1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002dc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000155ee  00000000  00000000  0002e5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4e5  00000000  00000000  00043bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088477  00000000  00000000  000500b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d852a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b30  00000000  00000000  000d8580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080038b8 	.word	0x080038b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080038b8 	.word	0x080038b8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b96e 	b.w	8000ca8 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468c      	mov	ip, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f040 8083 	bne.w	8000afa <__udivmoddi4+0x116>
 80009f4:	428a      	cmp	r2, r1
 80009f6:	4617      	mov	r7, r2
 80009f8:	d947      	bls.n	8000a8a <__udivmoddi4+0xa6>
 80009fa:	fab2 f282 	clz	r2, r2
 80009fe:	b142      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 8000a00:	f1c2 0020 	rsb	r0, r2, #32
 8000a04:	fa24 f000 	lsr.w	r0, r4, r0
 8000a08:	4091      	lsls	r1, r2
 8000a0a:	4097      	lsls	r7, r2
 8000a0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbbc f6f8 	udiv	r6, ip, r8
 8000a1c:	fa1f fe87 	uxth.w	lr, r7
 8000a20:	fb08 c116 	mls	r1, r8, r6, ip
 8000a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a28:	fb06 f10e 	mul.w	r1, r6, lr
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18fb      	adds	r3, r7, r3
 8000a32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a36:	f080 8119 	bcs.w	8000c6c <__udivmoddi4+0x288>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8116 	bls.w	8000c6c <__udivmoddi4+0x288>
 8000a40:	3e02      	subs	r6, #2
 8000a42:	443b      	add	r3, r7
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a58:	45a6      	cmp	lr, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8105 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a66:	45a6      	cmp	lr, r4
 8000a68:	f240 8102 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	443c      	add	r4, r7
 8000a70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a74:	eba4 040e 	sub.w	r4, r4, lr
 8000a78:	2600      	movs	r6, #0
 8000a7a:	b11d      	cbz	r5, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c5 4300 	strd	r4, r3, [r5]
 8000a84:	4631      	mov	r1, r6
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	b902      	cbnz	r2, 8000a8e <__udivmoddi4+0xaa>
 8000a8c:	deff      	udf	#255	; 0xff
 8000a8e:	fab2 f282 	clz	r2, r2
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	d150      	bne.n	8000b38 <__udivmoddi4+0x154>
 8000a96:	1bcb      	subs	r3, r1, r7
 8000a98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a9c:	fa1f f887 	uxth.w	r8, r7
 8000aa0:	2601      	movs	r6, #1
 8000aa2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000aa6:	0c21      	lsrs	r1, r4, #16
 8000aa8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ab4:	428b      	cmp	r3, r1
 8000ab6:	d907      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 8000ab8:	1879      	adds	r1, r7, r1
 8000aba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000abe:	d202      	bcs.n	8000ac6 <__udivmoddi4+0xe2>
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	f200 80e9 	bhi.w	8000c98 <__udivmoddi4+0x2b4>
 8000ac6:	4684      	mov	ip, r0
 8000ac8:	1ac9      	subs	r1, r1, r3
 8000aca:	b2a3      	uxth	r3, r4
 8000acc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ad4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ad8:	fb08 f800 	mul.w	r8, r8, r0
 8000adc:	45a0      	cmp	r8, r4
 8000ade:	d907      	bls.n	8000af0 <__udivmoddi4+0x10c>
 8000ae0:	193c      	adds	r4, r7, r4
 8000ae2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x10a>
 8000ae8:	45a0      	cmp	r8, r4
 8000aea:	f200 80d9 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000aee:	4618      	mov	r0, r3
 8000af0:	eba4 0408 	sub.w	r4, r4, r8
 8000af4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000af8:	e7bf      	b.n	8000a7a <__udivmoddi4+0x96>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0x12e>
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	f000 80b1 	beq.w	8000c66 <__udivmoddi4+0x282>
 8000b04:	2600      	movs	r6, #0
 8000b06:	e9c5 0100 	strd	r0, r1, [r5]
 8000b0a:	4630      	mov	r0, r6
 8000b0c:	4631      	mov	r1, r6
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	fab3 f683 	clz	r6, r3
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d14a      	bne.n	8000bb0 <__udivmoddi4+0x1cc>
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d302      	bcc.n	8000b24 <__udivmoddi4+0x140>
 8000b1e:	4282      	cmp	r2, r0
 8000b20:	f200 80b8 	bhi.w	8000c94 <__udivmoddi4+0x2b0>
 8000b24:	1a84      	subs	r4, r0, r2
 8000b26:	eb61 0103 	sbc.w	r1, r1, r3
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	468c      	mov	ip, r1
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d0a8      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000b32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b36:	e7a5      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000b38:	f1c2 0320 	rsb	r3, r2, #32
 8000b3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b40:	4097      	lsls	r7, r2
 8000b42:	fa01 f002 	lsl.w	r0, r1, r2
 8000b46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b4a:	40d9      	lsrs	r1, r3
 8000b4c:	4330      	orrs	r0, r6
 8000b4e:	0c03      	lsrs	r3, r0, #16
 8000b50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b54:	fa1f f887 	uxth.w	r8, r7
 8000b58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f108 	mul.w	r1, r6, r8
 8000b64:	4299      	cmp	r1, r3
 8000b66:	fa04 f402 	lsl.w	r4, r4, r2
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x19c>
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b72:	f080 808d 	bcs.w	8000c90 <__udivmoddi4+0x2ac>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 808a 	bls.w	8000c90 <__udivmoddi4+0x2ac>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	443b      	add	r3, r7
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b281      	uxth	r1, r0
 8000b84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b90:	fb00 f308 	mul.w	r3, r0, r8
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x1c4>
 8000b98:	1879      	adds	r1, r7, r1
 8000b9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b9e:	d273      	bcs.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d971      	bls.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	4439      	add	r1, r7
 8000ba8:	1acb      	subs	r3, r1, r3
 8000baa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bae:	e778      	b.n	8000aa2 <__udivmoddi4+0xbe>
 8000bb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bbc:	431c      	orrs	r4, r3
 8000bbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bce:	431f      	orrs	r7, r3
 8000bd0:	0c3b      	lsrs	r3, r7, #16
 8000bd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bd6:	fa1f f884 	uxth.w	r8, r4
 8000bda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000be2:	fb09 fa08 	mul.w	sl, r9, r8
 8000be6:	458a      	cmp	sl, r1
 8000be8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bec:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x220>
 8000bf2:	1861      	adds	r1, r4, r1
 8000bf4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bf8:	d248      	bcs.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfa:	458a      	cmp	sl, r1
 8000bfc:	d946      	bls.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000c02:	4421      	add	r1, r4
 8000c04:	eba1 010a 	sub.w	r1, r1, sl
 8000c08:	b2bf      	uxth	r7, r7
 8000c0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c12:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c16:	fb00 f808 	mul.w	r8, r0, r8
 8000c1a:	45b8      	cmp	r8, r7
 8000c1c:	d907      	bls.n	8000c2e <__udivmoddi4+0x24a>
 8000c1e:	19e7      	adds	r7, r4, r7
 8000c20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c24:	d22e      	bcs.n	8000c84 <__udivmoddi4+0x2a0>
 8000c26:	45b8      	cmp	r8, r7
 8000c28:	d92c      	bls.n	8000c84 <__udivmoddi4+0x2a0>
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	4427      	add	r7, r4
 8000c2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c32:	eba7 0708 	sub.w	r7, r7, r8
 8000c36:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3a:	454f      	cmp	r7, r9
 8000c3c:	46c6      	mov	lr, r8
 8000c3e:	4649      	mov	r1, r9
 8000c40:	d31a      	bcc.n	8000c78 <__udivmoddi4+0x294>
 8000c42:	d017      	beq.n	8000c74 <__udivmoddi4+0x290>
 8000c44:	b15d      	cbz	r5, 8000c5e <__udivmoddi4+0x27a>
 8000c46:	ebb3 020e 	subs.w	r2, r3, lr
 8000c4a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c4e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c52:	40f2      	lsrs	r2, r6
 8000c54:	ea4c 0202 	orr.w	r2, ip, r2
 8000c58:	40f7      	lsrs	r7, r6
 8000c5a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c5e:	2600      	movs	r6, #0
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e70b      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e9      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6fd      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c74:	4543      	cmp	r3, r8
 8000c76:	d2e5      	bcs.n	8000c44 <__udivmoddi4+0x260>
 8000c78:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c7c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7df      	b.n	8000c44 <__udivmoddi4+0x260>
 8000c84:	4608      	mov	r0, r1
 8000c86:	e7d2      	b.n	8000c2e <__udivmoddi4+0x24a>
 8000c88:	4660      	mov	r0, ip
 8000c8a:	e78d      	b.n	8000ba8 <__udivmoddi4+0x1c4>
 8000c8c:	4681      	mov	r9, r0
 8000c8e:	e7b9      	b.n	8000c04 <__udivmoddi4+0x220>
 8000c90:	4666      	mov	r6, ip
 8000c92:	e775      	b.n	8000b80 <__udivmoddi4+0x19c>
 8000c94:	4630      	mov	r0, r6
 8000c96:	e74a      	b.n	8000b2e <__udivmoddi4+0x14a>
 8000c98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c9c:	4439      	add	r1, r7
 8000c9e:	e713      	b.n	8000ac8 <__udivmoddi4+0xe4>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	e724      	b.n	8000af0 <__udivmoddi4+0x10c>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <gpioConfigurePin>:
int gpioReadPin(Gpio *gpio, int pin){
	return (gpio->IDR >> pin) & 1;
}

void gpioConfigurePin(Gpio *gpio, int pin, GpioConfig cfg)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
	//configure GPIO mode
	gpio->MODER &= GPIO_MODE_MASK(pin);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2103      	movs	r1, #3
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	401a      	ands	r2, r3
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	601a      	str	r2, [r3, #0]
	gpio->MODER |= (cfg & 0xF) << (2 * pin);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 020f 	and.w	r2, r3, #15
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	430b      	orrs	r3, r1
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	601a      	str	r2, [r3, #0]


	//configure GPIO output driver type
	gpio->OTYPER &= GPIO_DRVR_MASK(pin);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	2101      	movs	r1, #1
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	401a      	ands	r2, r3
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	605a      	str	r2, [r3, #4]
	gpio->OTYPER |= ((cfg & 0xF0) >> 4) << pin;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	4619      	mov	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	091b      	lsrs	r3, r3, #4
 8000d08:	f003 020f 	and.w	r2, r3, #15
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	430b      	orrs	r3, r1
 8000d14:	461a      	mov	r2, r3
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	605a      	str	r2, [r3, #4]

	//Configure GPIO speed
	gpio->OSPEEDR &= GPIO_SPEED_MASK(pin);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2103      	movs	r1, #3
 8000d24:	fa01 f303 	lsl.w	r3, r1, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	609a      	str	r2, [r3, #8]
	gpio->OSPEEDR |= ((cfg & 0xF00) >> 8) << (2 * pin);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	4619      	mov	r1, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 020f 	and.w	r2, r3, #15
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	430b      	orrs	r3, r1
 8000d48:	461a      	mov	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	609a      	str	r2, [r3, #8]

	//Configure GPIO pull type
	gpio->PUPDR &= GPIO_PULL_MASK(pin);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	68da      	ldr	r2, [r3, #12]
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	2103      	movs	r1, #3
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	401a      	ands	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	60da      	str	r2, [r3, #12]
	gpio->PUPDR |= ((cfg & 0xF000) >> 12) << (2 * pin);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	0b1b      	lsrs	r3, r3, #12
 8000d6e:	f003 020f 	and.w	r2, r3, #15
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	430b      	orrs	r3, r1
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	60da      	str	r2, [r3, #12]

	//Configure GPIO Alternate Function
	//if ALT functon is selected, then store into upper and lower AFR
	if((gpio->MODER & (0x3 << (2 * pin))) >> (2 * pin) == GPIO_ALT_FUNC)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2103      	movs	r1, #3
 8000d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d90:	401a      	ands	r2, r3
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa42 f303 	asr.w	r3, r2, r3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d138      	bne.n	8000e10 <gpioConfigurePin+0x164>
		if(pin <= 0x07){
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	2b07      	cmp	r3, #7
 8000da2:	dc1a      	bgt.n	8000dda <gpioConfigurePin+0x12e>
			gpio->AFR[0] &= GPIO_AFR_MASK(pin);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	6a1a      	ldr	r2, [r3, #32]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	210f      	movs	r1, #15
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	401a      	ands	r2, r3
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	621a      	str	r2, [r3, #32]
			gpio->AFR[0] |= ((cfg & 0xF0000) >> 16) << (4 * pin);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6a1b      	ldr	r3, [r3, #32]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	0c1b      	lsrs	r3, r3, #16
 8000dc4:	f003 020f 	and.w	r2, r3, #15
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	430b      	orrs	r3, r1
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	621a      	str	r2, [r3, #32]
		}
		else{
			gpio->AFR[1] &= GPIO_AFR_MASK(pin);
			gpio->AFR[1] |= ((cfg & 0xF0000) >> 16) << (4 * (pin - 8));
		}
}
 8000dd8:	e01a      	b.n	8000e10 <gpioConfigurePin+0x164>
			gpio->AFR[1] &= GPIO_AFR_MASK(pin);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	210f      	movs	r1, #15
 8000de4:	fa01 f303 	lsl.w	r3, r1, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	401a      	ands	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	625a      	str	r2, [r3, #36]	; 0x24
			gpio->AFR[1] |= ((cfg & 0xF0000) >> 16) << (4 * (pin - 8));
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df4:	4619      	mov	r1, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	0c1b      	lsrs	r3, r3, #16
 8000dfa:	f003 020f 	and.w	r2, r3, #15
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	3b08      	subs	r3, #8
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	430b      	orrs	r3, r1
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <getI2CFreq>:
 *      Author: ken chow
 */

#include "I2C.h"

uint32_t getI2CFreq(I2CReg *i2c){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	HAL_RCC_GetPCLK1Freq();
 8000e24:	f002 fade 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
}
 8000e28:	bf00      	nop
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <I2C_configure>:

void I2C_configure(I2CReg *i2c, I2C_Control_config configuration){
 8000e32:	b490      	push	{r4, r7}
 8000e34:	b084      	sub	sp, #16
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	60f8      	str	r0, [r7, #12]
 8000e3a:	e9c7 2300 	strd	r2, r3, [r7]
	i2c->CR1 &= ~(configuration & I2C_CR1_MASK);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	401a      	ands	r2, r3
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	601a      	str	r2, [r3, #0]
	i2c->CR1 |= (configuration & I2C_CR1_MASK);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	431a      	orrs	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	601a      	str	r2, [r3, #0]
	i2c->CR2 &= ~(configuration >> 16);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	685c      	ldr	r4, [r3, #4]
 8000e60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e64:	f04f 0200 	mov.w	r2, #0
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	0c02      	lsrs	r2, r0, #16
 8000e6e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e72:	0c0b      	lsrs	r3, r1, #16
 8000e74:	4613      	mov	r3, r2
 8000e76:	43db      	mvns	r3, r3
 8000e78:	ea04 0203 	and.w	r2, r4, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= (configuration >> 16);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	685c      	ldr	r4, [r3, #4]
 8000e84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	f04f 0300 	mov.w	r3, #0
 8000e90:	0c02      	lsrs	r2, r0, #16
 8000e92:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e96:	0c0b      	lsrs	r3, r1, #16
 8000e98:	4613      	mov	r3, r2
 8000e9a:	ea44 0203 	orr.w	r2, r4, r3
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	605a      	str	r2, [r3, #4]
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc90      	pop	{r4, r7}
 8000eaa:	4770      	bx	lr

08000eac <I2C_SoftwareReset>:

void I2C_SoftwareReset(I2CReg *i2c){
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	i2c->CR1 &= ~I2C_UNDER_RESET;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	601a      	str	r2, [r3, #0]
	i2c->CR1 |= I2C_UNDER_RESET	;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	601a      	str	r2, [r3, #0]
	i2c->CR1 &= ~I2C_UNDER_RESET;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	601a      	str	r2, [r3, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	0000      	movs	r0, r0
	...

08000ee8 <I2C_set_CCR_and_TRISE>:

void I2C_set_CCR_and_TRISE(I2CReg *i2c, uint32_t frequency){
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b08b      	sub	sp, #44	; 0x2c
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	long double Thigh;
    uint32_t apb1_freq = getI2CFreq(i2c);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ff92 	bl	8000e1c <getI2CFreq>
 8000ef8:	6278      	str	r0, [r7, #36]	; 0x24
    long double apb1_period = 1 / (long double)apb1_freq;
 8000efa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000efc:	f7ff faae 	bl	800045c <__aeabi_ui2d>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	f04f 0000 	mov.w	r0, #0
 8000f08:	496d      	ldr	r1, [pc, #436]	; (80010c0 <I2C_set_CCR_and_TRISE+0x1d8>)
 8000f0a:	f7ff fc4b 	bl	80007a4 <__aeabi_ddiv>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	e9c7 2306 	strd	r2, r3, [r7, #24]
    long double i2c_period = 1 / (long double)frequency;
 8000f16:	6838      	ldr	r0, [r7, #0]
 8000f18:	f7ff faa0 	bl	800045c <__aeabi_ui2d>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	f04f 0000 	mov.w	r0, #0
 8000f24:	4966      	ldr	r1, [pc, #408]	; (80010c0 <I2C_set_CCR_and_TRISE+0x1d8>)
 8000f26:	f7ff fc3d 	bl	80007a4 <__aeabi_ddiv>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	i2c->TRISE = 0x0;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
	i2c->CCR &= ~0xFFF;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000f40:	f023 030f 	bic.w	r3, r3, #15
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	61d3      	str	r3, [r2, #28]
	if(i2c->CCR & (1 << 15)){		//Fast Mode
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d06a      	beq.n	800102a <I2C_set_CCR_and_TRISE+0x142>
		i2c->TRISE |= (uint32_t)((3E-7 / apb1_period) + 1);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1c      	ldr	r4, [r3, #32]
 8000f58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f5c:	a154      	add	r1, pc, #336	; (adr r1, 80010b0 <I2C_set_CCR_and_TRISE+0x1c8>)
 8000f5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f62:	f7ff fc1f 	bl	80007a4 <__aeabi_ddiv>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	4b53      	ldr	r3, [pc, #332]	; (80010c0 <I2C_set_CCR_and_TRISE+0x1d8>)
 8000f74:	f7ff f936 	bl	80001e4 <__adddf3>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f7ff fcf8 	bl	8000974 <__aeabi_d2uiz>
 8000f84:	4603      	mov	r3, r0
 8000f86:	ea44 0203 	orr.w	r2, r4, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	621a      	str	r2, [r3, #32]
		if(i2c->CCR & (1 << 14)){
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d028      	beq.n	8000fec <I2C_set_CCR_and_TRISE+0x104>
			Thigh = i2c_period * (9 / 25);
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fa6:	f7ff fad3 	bl	8000550 <__aeabi_dmul>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	e9c7 2302 	strd	r2, r3, [r7, #8]
			i2c->CCR |= (uint32_t)((Thigh / 9)/ apb1_period);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69dc      	ldr	r4, [r3, #28]
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	4b42      	ldr	r3, [pc, #264]	; (80010c4 <I2C_set_CCR_and_TRISE+0x1dc>)
 8000fbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fc0:	f7ff fbf0 	bl	80007a4 <__aeabi_ddiv>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fd0:	f7ff fbe8 	bl	80007a4 <__aeabi_ddiv>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f7ff fcca 	bl	8000974 <__aeabi_d2uiz>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	ea44 0203 	orr.w	r2, r4, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	61da      	str	r2, [r3, #28]
	}else {							//Standard Mode
		i2c->TRISE |= (uint32_t)((1E-6 / apb1_period) + 1);
		Thigh = i2c_period / 2;
		i2c->CCR |= (uint32_t)(Thigh / apb1_period);
	}
}
 8000fea:	e05a      	b.n	80010a2 <I2C_set_CCR_and_TRISE+0x1ba>
			Thigh = i2c_period / 3;
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	4b35      	ldr	r3, [pc, #212]	; (80010c8 <I2C_set_CCR_and_TRISE+0x1e0>)
 8000ff2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000ff6:	f7ff fbd5 	bl	80007a4 <__aeabi_ddiv>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	e9c7 2302 	strd	r2, r3, [r7, #8]
			i2c->CCR |= (uint32_t)(Thigh / apb1_period);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69dc      	ldr	r4, [r3, #28]
 8001006:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800100a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800100e:	f7ff fbc9 	bl	80007a4 <__aeabi_ddiv>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4610      	mov	r0, r2
 8001018:	4619      	mov	r1, r3
 800101a:	f7ff fcab 	bl	8000974 <__aeabi_d2uiz>
 800101e:	4603      	mov	r3, r0
 8001020:	ea44 0203 	orr.w	r2, r4, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	61da      	str	r2, [r3, #28]
}
 8001028:	e03b      	b.n	80010a2 <I2C_set_CCR_and_TRISE+0x1ba>
		i2c->TRISE |= (uint32_t)((1E-6 / apb1_period) + 1);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a1c      	ldr	r4, [r3, #32]
 800102e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001032:	a121      	add	r1, pc, #132	; (adr r1, 80010b8 <I2C_set_CCR_and_TRISE+0x1d0>)
 8001034:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001038:	f7ff fbb4 	bl	80007a4 <__aeabi_ddiv>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <I2C_set_CCR_and_TRISE+0x1d8>)
 800104a:	f7ff f8cb 	bl	80001e4 <__adddf3>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fc8d 	bl	8000974 <__aeabi_d2uiz>
 800105a:	4603      	mov	r3, r0
 800105c:	ea44 0203 	orr.w	r2, r4, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	621a      	str	r2, [r3, #32]
		Thigh = i2c_period / 2;
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800106c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001070:	f7ff fb98 	bl	80007a4 <__aeabi_ddiv>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	e9c7 2302 	strd	r2, r3, [r7, #8]
		i2c->CCR |= (uint32_t)(Thigh / apb1_period);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69dc      	ldr	r4, [r3, #28]
 8001080:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001084:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001088:	f7ff fb8c 	bl	80007a4 <__aeabi_ddiv>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fc6e 	bl	8000974 <__aeabi_d2uiz>
 8001098:	4603      	mov	r3, r0
 800109a:	ea44 0203 	orr.w	r2, r4, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	61da      	str	r2, [r3, #28]
}
 80010a2:	bf00      	nop
 80010a4:	372c      	adds	r7, #44	; 0x2c
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd90      	pop	{r4, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	f3af 8000 	nop.w
 80010b0:	f40d8376 	.word	0xf40d8376
 80010b4:	3e9421f5 	.word	0x3e9421f5
 80010b8:	a0b5ed8d 	.word	0xa0b5ed8d
 80010bc:	3eb0c6f7 	.word	0x3eb0c6f7
 80010c0:	3ff00000 	.word	0x3ff00000
 80010c4:	40220000 	.word	0x40220000
 80010c8:	40080000 	.word	0x40080000

080010cc <I2C_Start>:

void I2C_Start(I2CReg *i2c){
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	i2c->CR1 &= ~(POS_NEXT_BYTE_RECEIVED_IN_SHIFT_REG);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	601a      	str	r2, [r3, #0]
	i2c->CR1 |= ACKNOWLEDGE_RETURNED;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	601a      	str	r2, [r3, #0]
	i2c->CR1 |= I2C_GENERATED_START;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	601a      	str	r2, [r3, #0]
	while(!(i2c->SR1 & I2C_START_GENERATED));
 80010f8:	bf00      	nop
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f9      	beq.n	80010fa <I2C_Start+0x2e>
}
 8001106:	bf00      	nop
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <_I2C_Write>:


I2C_Status _I2C_Write(I2CReg *i2c, int SlaveAddr, char *data, int length, int stopBit){
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	603b      	str	r3, [r7, #0]
	uint32_t temp;

	//Initiate start sequence
	I2C_Start(i2c);
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	f7ff ffd2 	bl	80010cc <I2C_Start>

	//send the slave address
	i2c->DR = (uint32_t)SlaveAddr << 1;
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	005a      	lsls	r2, r3, #1
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	611a      	str	r2, [r3, #16]
	while(!(i2c->SR1 & I2C_ADDRESS_MATCHED));
 8001130:	bf00      	nop
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f9      	beq.n	8001132 <_I2C_Write+0x1e>
	temp = 0x0;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
	temp = i2c->SR1;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	613b      	str	r3, [r7, #16]
	temp = i2c->SR2;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	613b      	str	r3, [r7, #16]
	while(!(i2c->SR1 & I2C_TXE));
 800114e:	bf00      	nop
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f9      	beq.n	8001150 <_I2C_Write+0x3c>

	for(int i = 0; i < length; i++){
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	e022      	b.n	80011a8 <_I2C_Write+0x94>
		i2c->DR = (uint32_t)data[i];
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	4413      	add	r3, r2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	611a      	str	r2, [r3, #16]
		while(!(i2c->SR1 & I2C_TXE));
 8001170:	bf00      	nop
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f9      	beq.n	8001172 <_I2C_Write+0x5e>
		while(!(i2c->SR1 & I2C_DATA_TRANSFERRED));
 800117e:	bf00      	nop
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f9      	beq.n	8001180 <_I2C_Write+0x6c>
		if(i2c->SR1 & I2C_ACK_FAIL)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <_I2C_Write+0x88>
			return I2C_ERROR;
 8001198:	2300      	movs	r3, #0
 800119a:	e019      	b.n	80011d0 <_I2C_Write+0xbc>
		//temp = 0x0;
		//temp = i2c->SR1;
		temp = i2c->SR2;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < length; i++){
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	3301      	adds	r3, #1
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	dbd8      	blt.n	8001162 <_I2C_Write+0x4e>
	}
	if(stopBit){
 80011b0:	6a3b      	ldr	r3, [r7, #32]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00b      	beq.n	80011ce <_I2C_Write+0xba>
		i2c->CR1 |= I2C_GENERATED_STOP;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	601a      	str	r2, [r3, #0]
		temp = i2c->SR1;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	613b      	str	r3, [r7, #16]
		temp = i2c->SR2;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	613b      	str	r3, [r7, #16]
	}
	return I2C_SUCCESS;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <I2C_Write>:

I2C_Status I2C_Write(I2CReg *i2c, int SlaveAddr, char *data, int length){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af02      	add	r7, sp, #8
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	603b      	str	r3, [r7, #0]
	return _I2C_Write(i2c, SlaveAddr, data, length, 1);
 80011e6:	2301      	movs	r3, #1
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	68b9      	ldr	r1, [r7, #8]
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f7ff ff8f 	bl	8001114 <_I2C_Write>
 80011f6:	4603      	mov	r3, r0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <I2C_Read>:

I2C_Status I2C_Read(I2CReg *i2c, int SlaveAddr, char *dataToWrite, int Wrlength, char *rdData, int Rdlength){
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af02      	add	r7, sp, #8
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	603b      	str	r3, [r7, #0]
	uint32_t temp;

	I2C_Status result = _I2C_Write(i2c, SlaveAddr, dataToWrite, Wrlength, 0);
 800120e:	2300      	movs	r3, #0
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	68b9      	ldr	r1, [r7, #8]
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f7ff ff7b 	bl	8001114 <_I2C_Write>
 800121e:	4603      	mov	r3, r0
 8001220:	74fb      	strb	r3, [r7, #19]
	if(result != I2C_SUCCESS)
 8001222:	7cfb      	ldrb	r3, [r7, #19]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d001      	beq.n	800122c <I2C_Read+0x2c>
		return result;
 8001228:	7cfb      	ldrb	r3, [r7, #19]
 800122a:	e04d      	b.n	80012c8 <I2C_Read+0xc8>

	//repeated start
	I2C_Start(i2c);
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f7ff ff4d 	bl	80010cc <I2C_Start>

	i2c->DR = (uint32_t)(SlaveAddr << 1) + 1;
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	611a      	str	r2, [r3, #16]
	while(!(i2c->SR1 & I2C_ADDRESS_MATCHED));
 800123c:	bf00      	nop
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f9      	beq.n	800123e <I2C_Read+0x3e>
	//temp = 0x0;
	//temp = i2c->SR1;
	//temp = i2c->SR2;
	i2c->SR2 = i2c->SR2;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	699a      	ldr	r2, [r3, #24]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	619a      	str	r2, [r3, #24]
	for(int i=0; i< (Rdlength - 1); i++){
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	e016      	b.n	8001286 <I2C_Read+0x86>
		while(!(i2c->SR1 & I2C_RXNE));
 8001258:	bf00      	nop
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f9      	beq.n	800125a <I2C_Read+0x5a>
		rdData[i] = i2c->DR;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6919      	ldr	r1, [r3, #16]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	6a3a      	ldr	r2, [r7, #32]
 800126e:	4413      	add	r3, r2
 8001270:	b2ca      	uxtb	r2, r1
 8001272:	701a      	strb	r2, [r3, #0]
		i2c->CR1 |= ACKNOWLEDGE_RETURNED;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	601a      	str	r2, [r3, #0]
	for(int i=0; i< (Rdlength - 1); i++){
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3301      	adds	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	3b01      	subs	r3, #1
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	429a      	cmp	r2, r3
 800128e:	dbe3      	blt.n	8001258 <I2C_Read+0x58>
	}
	i2c->CR1 |= I2C_GENERATED_STOP;					//testing
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	601a      	str	r2, [r3, #0]
	while(!(i2c->SR1 & I2C_RXNE));
 800129c:	bf00      	nop
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f9      	beq.n	800129e <I2C_Read+0x9e>
	rdData[Rdlength - 1] = i2c->DR;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6919      	ldr	r1, [r3, #16]
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	3b01      	subs	r3, #1
 80012b2:	6a3a      	ldr	r2, [r7, #32]
 80012b4:	4413      	add	r3, r2
 80012b6:	b2ca      	uxtb	r2, r1
 80012b8:	701a      	strb	r2, [r3, #0]
	i2c->CR1 &= ~(ACKNOWLEDGE_RETURNED);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	601a      	str	r2, [r3, #0]
	//i2c->CR1 |= I2C_GENERATED_STOP;
	return I2C_SUCCESS;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <rccResetUnresetDevice>:
 *      Author: ken chow
 */

#include "RCC.h"

void rccResetUnresetDevice(_IO_ uint32_t *io, int bitnum){
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
	*io &= ~(1 << bitnum);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2101      	movs	r1, #1
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	fa01 f202 	lsl.w	r2, r1, r2
 80012e6:	43d2      	mvns	r2, r2
 80012e8:	401a      	ands	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	601a      	str	r2, [r3, #0]
	*io |= 1 << bitnum;				//Reset
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2101      	movs	r1, #1
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	fa01 f202 	lsl.w	r2, r1, r2
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	601a      	str	r2, [r3, #0]
	*io &= ~(1 << bitnum);			//Unreset
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2101      	movs	r1, #1
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	fa01 f202 	lsl.w	r2, r1, r2
 800130c:	43d2      	mvns	r2, r2
 800130e:	401a      	ands	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	601a      	str	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <rccEnableClock>:

void rccEnableClock(_IO_ uint32_t *io, int bitnum){
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
	*io &= ~(1 << bitnum);			//Clear
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2101      	movs	r1, #1
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	fa01 f202 	lsl.w	r2, r1, r2
 8001336:	43d2      	mvns	r2, r2
 8001338:	401a      	ands	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	601a      	str	r2, [r3, #0]
	*io |= 1 << bitnum;				//Enable
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2101      	movs	r1, #1
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	fa01 f202 	lsl.w	r2, r1, r2
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	601a      	str	r2, [r3, #0]

}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <rccResetAndUnresetUsart>:
void rccResetAndUnresetGpio(RccGpio rccGpio){
	rccResetUnresetDevice(ahb1ResetReg, rccGpio);	//Reset and Unreset
	rccEnableClock(ahb1_EnClkReg, rccGpio);			//Enable Clock
}

void rccResetAndUnresetUsart(RccUsart rccUsart){
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
	if(rccUsart == Rcc_USART2){
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	2b11      	cmp	r3, #17
 800136a:	d10a      	bne.n	8001382 <rccResetAndUnresetUsart+0x26>
		rccResetUnresetDevice(apb1ResetReg, rccUsart);	//Reset and Unreset
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	4619      	mov	r1, r3
 8001370:	480b      	ldr	r0, [pc, #44]	; (80013a0 <rccResetAndUnresetUsart+0x44>)
 8001372:	f7ff ffad 	bl	80012d0 <rccResetUnresetDevice>
		rccEnableClock(apb1_EnClkReg, rccUsart);		//Enable Clock
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	4619      	mov	r1, r3
 800137a:	480a      	ldr	r0, [pc, #40]	; (80013a4 <rccResetAndUnresetUsart+0x48>)
 800137c:	f7ff ffd0 	bl	8001320 <rccEnableClock>
	else
	{
		rccResetUnresetDevice(apb2ResetReg, rccUsart);	//Reset and Unreset
		rccEnableClock(apb2_EnClkReg, rccUsart);		//Enable Clock
	}
}
 8001380:	e009      	b.n	8001396 <rccResetAndUnresetUsart+0x3a>
		rccResetUnresetDevice(apb2ResetReg, rccUsart);	//Reset and Unreset
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	4619      	mov	r1, r3
 8001386:	4808      	ldr	r0, [pc, #32]	; (80013a8 <rccResetAndUnresetUsart+0x4c>)
 8001388:	f7ff ffa2 	bl	80012d0 <rccResetUnresetDevice>
		rccEnableClock(apb2_EnClkReg, rccUsart);		//Enable Clock
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	4619      	mov	r1, r3
 8001390:	4806      	ldr	r0, [pc, #24]	; (80013ac <rccResetAndUnresetUsart+0x50>)
 8001392:	f7ff ffc5 	bl	8001320 <rccEnableClock>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023820 	.word	0x40023820
 80013a4:	40023840 	.word	0x40023840
 80013a8:	40023824 	.word	0x40023824
 80013ac:	40023844 	.word	0x40023844

080013b0 <rccResetAndUnresetI2C>:

void rccResetAndUnresetI2C(RccI2C rccI2C){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
	rccResetUnresetDevice(apb1ResetReg, rccI2C);
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	4619      	mov	r1, r3
 80013be:	4806      	ldr	r0, [pc, #24]	; (80013d8 <rccResetAndUnresetI2C+0x28>)
 80013c0:	f7ff ff86 	bl	80012d0 <rccResetUnresetDevice>
	rccEnableClock(apb1_EnClkReg, rccI2C);
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	4619      	mov	r1, r3
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <rccResetAndUnresetI2C+0x2c>)
 80013ca:	f7ff ffa9 	bl	8001320 <rccEnableClock>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023820 	.word	0x40023820
 80013dc:	40023840 	.word	0x40023840

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e4:	f000 fc62 	bl	8001cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e8:	f000 f83a 	bl	8001460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ec:	f000 f99e 	bl	800172c <MX_GPIO_Init>
  MX_DMA_Init();
 80013f0:	f000 f97c 	bl	80016ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013f4:	f000 f950 	bl	8001698 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80013f8:	f000 f89a 	bl	8001530 <MX_I2C1_Init>
  MX_I2C2_Init();
 80013fc:	f000 f8c6 	bl	800158c <MX_I2C2_Init>
  MX_I2C3_Init();
 8001400:	f000 f8f2 	bl	80015e8 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001404:	f000 f91e 	bl	8001644 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  rccResetAndUnresetUsart(Rcc_USART2);
 8001408:	2011      	movs	r0, #17
 800140a:	f7ff ffa7 	bl	800135c <rccResetAndUnresetUsart>
  rccResetAndUnresetI2C(Rcc_I2C_2);
 800140e:	2016      	movs	r0, #22
 8001410:	f7ff ffce 	bl	80013b0 <rccResetAndUnresetI2C>
  //Usart_Gpio_Pin_Configure();

  //usartconfigure(usart2, USART_TX_EN | USART_RX_EN | USART_OVER8 | USART_8_DATA_BIT | USART_EN);
  //usartSetBaudRate(usart2, 9600);
  //Usart_Transmit_Sentence(usart2);
  gpioConfigurePin(gpioB, 9, GPIO_ALT_FUNC | GPIO_OPEN_DRAIN | GPIO_HIGH_SPEED | AF_9 ); 	//I2C_SDA
 8001414:	4a0d      	ldr	r2, [pc, #52]	; (800144c <main+0x6c>)
 8001416:	2109      	movs	r1, #9
 8001418:	480d      	ldr	r0, [pc, #52]	; (8001450 <main+0x70>)
 800141a:	f7ff fc47 	bl	8000cac <gpioConfigurePin>
  gpioConfigurePin(gpioB, 10, GPIO_ALT_FUNC| GPIO_OPEN_DRAIN | GPIO_HIGH_SPEED | AF_4 );	//I2C_SCL
 800141e:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <main+0x74>)
 8001420:	210a      	movs	r1, #10
 8001422:	480b      	ldr	r0, [pc, #44]	; (8001450 <main+0x70>)
 8001424:	f7ff fc42 	bl	8000cac <gpioConfigurePin>
  I2C_SoftwareReset(I2C_2);
 8001428:	480b      	ldr	r0, [pc, #44]	; (8001458 <main+0x78>)
 800142a:	f7ff fd3f 	bl	8000eac <I2C_SoftwareReset>
  I2C_configure(I2C_2, PERIPHERAL_EN | I2C_MODE | SMB_TYPE_HOST);
 800142e:	f04f 0209 	mov.w	r2, #9
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <main+0x78>)
 8001438:	f7ff fcfb 	bl	8000e32 <I2C_configure>
  I2C_set_CCR_and_TRISE(I2C_2, 100000);
 800143c:	4907      	ldr	r1, [pc, #28]	; (800145c <main+0x7c>)
 800143e:	4806      	ldr	r0, [pc, #24]	; (8001458 <main+0x78>)
 8001440:	f7ff fd52 	bl	8000ee8 <I2C_set_CCR_and_TRISE>
  I2C_Read_And_Write();
 8001444:	f000 f9e2 	bl	800180c <I2C_Read_And_Write>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001448:	e7fe      	b.n	8001448 <main+0x68>
 800144a:	bf00      	nop
 800144c:	00090312 	.word	0x00090312
 8001450:	40020400 	.word	0x40020400
 8001454:	00040312 	.word	0x00040312
 8001458:	40005800 	.word	0x40005800
 800145c:	000186a0 	.word	0x000186a0

08001460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b094      	sub	sp, #80	; 0x50
 8001464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001466:	f107 0320 	add.w	r3, r7, #32
 800146a:	2230      	movs	r2, #48	; 0x30
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f002 fa1a 	bl	80038a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	4b27      	ldr	r3, [pc, #156]	; (8001528 <SystemClock_Config+0xc8>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	4a26      	ldr	r2, [pc, #152]	; (8001528 <SystemClock_Config+0xc8>)
 800148e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001492:	6413      	str	r3, [r2, #64]	; 0x40
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <SystemClock_Config+0xc8>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	4b21      	ldr	r3, [pc, #132]	; (800152c <SystemClock_Config+0xcc>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a20      	ldr	r2, [pc, #128]	; (800152c <SystemClock_Config+0xcc>)
 80014aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b1e      	ldr	r3, [pc, #120]	; (800152c <SystemClock_Config+0xcc>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014bc:	2302      	movs	r3, #2
 80014be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c0:	2301      	movs	r3, #1
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c4:	2310      	movs	r3, #16
 80014c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c8:	2302      	movs	r3, #2
 80014ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014cc:	2300      	movs	r3, #0
 80014ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014d0:	2308      	movs	r3, #8
 80014d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80014d4:	2364      	movs	r3, #100	; 0x64
 80014d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014d8:	2302      	movs	r3, #2
 80014da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014dc:	2304      	movs	r3, #4
 80014de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e0:	f107 0320 	add.w	r3, r7, #32
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 fb31 	bl	8002b4c <HAL_RCC_OscConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014f0:	f000 f9aa 	bl	8001848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f4:	230f      	movs	r3, #15
 80014f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f8:	2302      	movs	r3, #2
 80014fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001504:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	2103      	movs	r1, #3
 8001510:	4618      	mov	r0, r3
 8001512:	f001 fd93 	bl	800303c <HAL_RCC_ClockConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800151c:	f000 f994 	bl	8001848 <Error_Handler>
  }
}
 8001520:	bf00      	nop
 8001522:	3750      	adds	r7, #80	; 0x50
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40023800 	.word	0x40023800
 800152c:	40007000 	.word	0x40007000

08001530 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_I2C1_Init+0x50>)
 8001536:	4a13      	ldr	r2, [pc, #76]	; (8001584 <MX_I2C1_Init+0x54>)
 8001538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_I2C1_Init+0x50>)
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <MX_I2C1_Init+0x58>)
 800153e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_I2C1_Init+0x50>)
 800154e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001552:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <MX_I2C1_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_I2C1_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <MX_I2C1_Init+0x50>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_I2C1_Init+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_I2C1_Init+0x50>)
 800156e:	f001 f9a9 	bl	80028c4 <HAL_I2C_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001578:	f000 f966 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200000dc 	.word	0x200000dc
 8001584:	40005400 	.word	0x40005400
 8001588:	000186a0 	.word	0x000186a0

0800158c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_I2C2_Init+0x50>)
 8001592:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <MX_I2C2_Init+0x54>)
 8001594:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_I2C2_Init+0x50>)
 8001598:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <MX_I2C2_Init+0x58>)
 800159a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_I2C2_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_I2C2_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_I2C2_Init+0x50>)
 80015aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <MX_I2C2_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_I2C2_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <MX_I2C2_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_I2C2_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	; (80015dc <MX_I2C2_Init+0x50>)
 80015ca:	f001 f97b 	bl	80028c4 <HAL_I2C_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015d4:	f000 f938 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000130 	.word	0x20000130
 80015e0:	40005800 	.word	0x40005800
 80015e4:	000186a0 	.word	0x000186a0

080015e8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <MX_I2C3_Init+0x50>)
 80015ee:	4a13      	ldr	r2, [pc, #76]	; (800163c <MX_I2C3_Init+0x54>)
 80015f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <MX_I2C3_Init+0x50>)
 80015f4:	4a12      	ldr	r2, [pc, #72]	; (8001640 <MX_I2C3_Init+0x58>)
 80015f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <MX_I2C3_Init+0x50>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <MX_I2C3_Init+0x50>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <MX_I2C3_Init+0x50>)
 8001606:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800160a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <MX_I2C3_Init+0x50>)
 800160e:	2200      	movs	r2, #0
 8001610:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <MX_I2C3_Init+0x50>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <MX_I2C3_Init+0x50>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <MX_I2C3_Init+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001624:	4804      	ldr	r0, [pc, #16]	; (8001638 <MX_I2C3_Init+0x50>)
 8001626:	f001 f94d 	bl	80028c4 <HAL_I2C_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001630:	f000 f90a 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000088 	.word	0x20000088
 800163c:	40005c00 	.word	0x40005c00
 8001640:	000186a0 	.word	0x000186a0

08001644 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <MX_USART1_UART_Init+0x50>)
 800164c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800167c:	f001 feda 	bl	8003434 <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001686:	f000 f8df 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000184 	.word	0x20000184
 8001694:	40011000 	.word	0x40011000

08001698 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <MX_USART2_UART_Init+0x50>)
 80016a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016be:	220c      	movs	r2, #12
 80016c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016d0:	f001 feb0 	bl	8003434 <HAL_UART_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016da:	f000 f8b5 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200001c8 	.word	0x200001c8
 80016e8:	40004400 	.word	0x40004400

080016ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <MX_DMA_Init+0x3c>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a0b      	ldr	r2, [pc, #44]	; (8001728 <MX_DMA_Init+0x3c>)
 80016fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <MX_DMA_Init+0x3c>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	2010      	movs	r0, #16
 8001714:	f000 fc17 	bl	8001f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001718:	2010      	movs	r0, #16
 800171a:	f000 fc30 	bl	8001f7e <HAL_NVIC_EnableIRQ>

}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800

0800172c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	; 0x28
 8001730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <MX_GPIO_Init+0xd0>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a2c      	ldr	r2, [pc, #176]	; (80017fc <MX_GPIO_Init+0xd0>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <MX_GPIO_Init+0xd0>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b26      	ldr	r3, [pc, #152]	; (80017fc <MX_GPIO_Init+0xd0>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a25      	ldr	r2, [pc, #148]	; (80017fc <MX_GPIO_Init+0xd0>)
 8001768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b23      	ldr	r3, [pc, #140]	; (80017fc <MX_GPIO_Init+0xd0>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <MX_GPIO_Init+0xd0>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a1e      	ldr	r2, [pc, #120]	; (80017fc <MX_GPIO_Init+0xd0>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <MX_GPIO_Init+0xd0>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <MX_GPIO_Init+0xd0>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a17      	ldr	r2, [pc, #92]	; (80017fc <MX_GPIO_Init+0xd0>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <MX_GPIO_Init+0xd0>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2120      	movs	r1, #32
 80017b6:	4812      	ldr	r0, [pc, #72]	; (8001800 <MX_GPIO_Init+0xd4>)
 80017b8:	f001 f86a 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <MX_GPIO_Init+0xd8>)
 80017c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	480d      	ldr	r0, [pc, #52]	; (8001808 <MX_GPIO_Init+0xdc>)
 80017d2:	f000 fed9 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017d6:	2320      	movs	r3, #32
 80017d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017da:	2301      	movs	r3, #1
 80017dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	4804      	ldr	r0, [pc, #16]	; (8001800 <MX_GPIO_Init+0xd4>)
 80017ee:	f000 fecb 	bl	8002588 <HAL_GPIO_Init>

}
 80017f2:	bf00      	nop
 80017f4:	3728      	adds	r7, #40	; 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020000 	.word	0x40020000
 8001804:	10210000 	.word	0x10210000
 8001808:	40020800 	.word	0x40020800

0800180c <I2C_Read_And_Write>:
	else
		Usart_Tx_String(usart, "World\n");
	HAL_Delay(1000);
}

void I2C_Read_And_Write(){
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af02      	add	r7, sp, #8
	char rdData[8];

	I2C_Write(I2C_2, 0x50, "20Stream", 8);
 8001812:	2308      	movs	r3, #8
 8001814:	4a09      	ldr	r2, [pc, #36]	; (800183c <I2C_Read_And_Write+0x30>)
 8001816:	2150      	movs	r1, #80	; 0x50
 8001818:	4809      	ldr	r0, [pc, #36]	; (8001840 <I2C_Read_And_Write+0x34>)
 800181a:	f7ff fcdd 	bl	80011d8 <I2C_Write>
	I2C_Read(I2C_2, 0x50, "13", 2, rdData, 2);
 800181e:	2302      	movs	r3, #2
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	463b      	mov	r3, r7
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2302      	movs	r3, #2
 8001828:	4a06      	ldr	r2, [pc, #24]	; (8001844 <I2C_Read_And_Write+0x38>)
 800182a:	2150      	movs	r1, #80	; 0x50
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <I2C_Read_And_Write+0x34>)
 800182e:	f7ff fce7 	bl	8001200 <I2C_Read>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	080038e0 	.word	0x080038e0
 8001840:	40005800 	.word	0x40005800
 8001844:	080038ec 	.word	0x080038ec

08001848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800184c:	b672      	cpsid	i
}
 800184e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001850:	e7fe      	b.n	8001850 <Error_Handler+0x8>
	...

08001854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_MspInit+0x4c>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a0f      	ldr	r2, [pc, #60]	; (80018a0 <HAL_MspInit+0x4c>)
 8001864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <HAL_MspInit+0x4c>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_MspInit+0x4c>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_MspInit+0x4c>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_MspInit+0x4c>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001892:	2007      	movs	r0, #7
 8001894:	f000 fb4c 	bl	8001f30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800

080018a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08e      	sub	sp, #56	; 0x38
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a64      	ldr	r2, [pc, #400]	; (8001a54 <HAL_I2C_MspInit+0x1b0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d12c      	bne.n	8001920 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
 80018ca:	4b63      	ldr	r3, [pc, #396]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a62      	ldr	r2, [pc, #392]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b60      	ldr	r3, [pc, #384]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	623b      	str	r3, [r7, #32]
 80018e0:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018e2:	23c0      	movs	r3, #192	; 0xc0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e6:	2312      	movs	r3, #18
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018f2:	2304      	movs	r3, #4
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fa:	4619      	mov	r1, r3
 80018fc:	4857      	ldr	r0, [pc, #348]	; (8001a5c <HAL_I2C_MspInit+0x1b8>)
 80018fe:	f000 fe43 	bl	8002588 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	4b54      	ldr	r3, [pc, #336]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a53      	ldr	r2, [pc, #332]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 800190c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b51      	ldr	r3, [pc, #324]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800191e:	e094      	b.n	8001a4a <HAL_I2C_MspInit+0x1a6>
  else if(hi2c->Instance==I2C2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a4e      	ldr	r2, [pc, #312]	; (8001a60 <HAL_I2C_MspInit+0x1bc>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d13e      	bne.n	80019a8 <HAL_I2C_MspInit+0x104>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a49      	ldr	r2, [pc, #292]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800194c:	2312      	movs	r3, #18
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001950:	2301      	movs	r3, #1
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001958:	2304      	movs	r3, #4
 800195a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001960:	4619      	mov	r1, r3
 8001962:	483e      	ldr	r0, [pc, #248]	; (8001a5c <HAL_I2C_MspInit+0x1b8>)
 8001964:	f000 fe10 	bl	8002588 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800196e:	2312      	movs	r3, #18
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001972:	2301      	movs	r3, #1
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800197a:	2309      	movs	r3, #9
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001982:	4619      	mov	r1, r3
 8001984:	4835      	ldr	r0, [pc, #212]	; (8001a5c <HAL_I2C_MspInit+0x1b8>)
 8001986:	f000 fdff 	bl	8002588 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	4b32      	ldr	r3, [pc, #200]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a31      	ldr	r2, [pc, #196]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 8001994:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697b      	ldr	r3, [r7, #20]
}
 80019a6:	e050      	b.n	8001a4a <HAL_I2C_MspInit+0x1a6>
  else if(hi2c->Instance==I2C3)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a2d      	ldr	r2, [pc, #180]	; (8001a64 <HAL_I2C_MspInit+0x1c0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d14b      	bne.n	8001a4a <HAL_I2C_MspInit+0x1a6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a27      	ldr	r2, [pc, #156]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a20      	ldr	r2, [pc, #128]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f0:	2312      	movs	r3, #18
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019fc:	2304      	movs	r3, #4
 80019fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a04:	4619      	mov	r1, r3
 8001a06:	4818      	ldr	r0, [pc, #96]	; (8001a68 <HAL_I2C_MspInit+0x1c4>)
 8001a08:	f000 fdbe 	bl	8002588 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a12:	2312      	movs	r3, #18
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a16:	2301      	movs	r3, #1
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a1e:	2304      	movs	r3, #4
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a26:	4619      	mov	r1, r3
 8001a28:	4810      	ldr	r0, [pc, #64]	; (8001a6c <HAL_I2C_MspInit+0x1c8>)
 8001a2a:	f000 fdad 	bl	8002588 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 8001a38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_I2C_MspInit+0x1b4>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
}
 8001a4a:	bf00      	nop
 8001a4c:	3738      	adds	r7, #56	; 0x38
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40005400 	.word	0x40005400
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40020400 	.word	0x40020400
 8001a60:	40005800 	.word	0x40005800
 8001a64:	40005c00 	.word	0x40005c00
 8001a68:	40020800 	.word	0x40020800
 8001a6c:	40020000 	.word	0x40020000

08001a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08c      	sub	sp, #48	; 0x30
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a49      	ldr	r2, [pc, #292]	; (8001bb4 <HAL_UART_MspInit+0x144>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d12d      	bne.n	8001aee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	4b48      	ldr	r3, [pc, #288]	; (8001bb8 <HAL_UART_MspInit+0x148>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	4a47      	ldr	r2, [pc, #284]	; (8001bb8 <HAL_UART_MspInit+0x148>)
 8001a9c:	f043 0310 	orr.w	r3, r3, #16
 8001aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa2:	4b45      	ldr	r3, [pc, #276]	; (8001bb8 <HAL_UART_MspInit+0x148>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f003 0310 	and.w	r3, r3, #16
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	4b41      	ldr	r3, [pc, #260]	; (8001bb8 <HAL_UART_MspInit+0x148>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a40      	ldr	r2, [pc, #256]	; (8001bb8 <HAL_UART_MspInit+0x148>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b3e      	ldr	r3, [pc, #248]	; (8001bb8 <HAL_UART_MspInit+0x148>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001aca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001adc:	2307      	movs	r3, #7
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4835      	ldr	r0, [pc, #212]	; (8001bbc <HAL_UART_MspInit+0x14c>)
 8001ae8:	f000 fd4e 	bl	8002588 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001aec:	e05e      	b.n	8001bac <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a33      	ldr	r2, [pc, #204]	; (8001bc0 <HAL_UART_MspInit+0x150>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d159      	bne.n	8001bac <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <HAL_UART_MspInit+0x148>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	4a2d      	ldr	r2, [pc, #180]	; (8001bb8 <HAL_UART_MspInit+0x148>)
 8001b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b06:	6413      	str	r3, [r2, #64]	; 0x40
 8001b08:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <HAL_UART_MspInit+0x148>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <HAL_UART_MspInit+0x148>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	4a26      	ldr	r2, [pc, #152]	; (8001bb8 <HAL_UART_MspInit+0x148>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6313      	str	r3, [r2, #48]	; 0x30
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <HAL_UART_MspInit+0x148>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b30:	230c      	movs	r3, #12
 8001b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b40:	2307      	movs	r3, #7
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	481c      	ldr	r0, [pc, #112]	; (8001bbc <HAL_UART_MspInit+0x14c>)
 8001b4c:	f000 fd1c 	bl	8002588 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001b50:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b52:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <HAL_UART_MspInit+0x158>)
 8001b54:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001b56:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b5c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b64:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b6a:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b70:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b72:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001b7e:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b90:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b92:	f000 fa0f 	bl	8001fb4 <HAL_DMA_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8001b9c:	f7ff fe54 	bl	8001848 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001ba4:	639a      	str	r2, [r3, #56]	; 0x38
 8001ba6:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001bac:	bf00      	nop
 8001bae:	3730      	adds	r7, #48	; 0x30
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40011000 	.word	0x40011000
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	40004400 	.word	0x40004400
 8001bc4:	20000028 	.word	0x20000028
 8001bc8:	40026088 	.word	0x40026088

08001bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <NMI_Handler+0x4>

08001bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <HardFault_Handler+0x4>

08001bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <MemManage_Handler+0x4>

08001bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <BusFault_Handler+0x4>

08001be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <UsageFault_Handler+0x4>

08001bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c18:	f000 f89a 	bl	8001d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <DMA1_Stream5_IRQHandler+0x10>)
 8001c26:	f000 fa73 	bl	8002110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000028 	.word	0x20000028

08001c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <SystemInit+0x20>)
 8001c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3e:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <SystemInit+0x20>)
 8001c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c5c:	480d      	ldr	r0, [pc, #52]	; (8001c94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c5e:	490e      	ldr	r1, [pc, #56]	; (8001c98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c60:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c64:	e002      	b.n	8001c6c <LoopCopyDataInit>

08001c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6a:	3304      	adds	r3, #4

08001c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c70:	d3f9      	bcc.n	8001c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c72:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c74:	4c0b      	ldr	r4, [pc, #44]	; (8001ca4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c78:	e001      	b.n	8001c7e <LoopFillZerobss>

08001c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c7c:	3204      	adds	r2, #4

08001c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c80:	d3fb      	bcc.n	8001c7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c82:	f7ff ffd7 	bl	8001c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c86:	f001 fdeb 	bl	8003860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c8a:	f7ff fba9 	bl	80013e0 <main>
  bx  lr    
 8001c8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c9c:	08003920 	.word	0x08003920
  ldr r2, =_sbss
 8001ca0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ca4:	20000210 	.word	0x20000210

08001ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca8:	e7fe      	b.n	8001ca8 <ADC_IRQHandler>
	...

08001cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_Init+0x40>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <HAL_Init+0x40>)
 8001cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_Init+0x40>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <HAL_Init+0x40>)
 8001cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_Init+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a07      	ldr	r2, [pc, #28]	; (8001cec <HAL_Init+0x40>)
 8001cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd4:	2003      	movs	r0, #3
 8001cd6:	f000 f92b 	bl	8001f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f000 f808 	bl	8001cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce0:	f7ff fdb8 	bl	8001854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023c00 	.word	0x40023c00

08001cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_InitTick+0x54>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_InitTick+0x58>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	4619      	mov	r1, r3
 8001d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 f943 	bl	8001f9a <HAL_SYSTICK_Config>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00e      	b.n	8001d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b0f      	cmp	r3, #15
 8001d22:	d80a      	bhi.n	8001d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d24:	2200      	movs	r2, #0
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	f000 f90b 	bl	8001f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d30:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <HAL_InitTick+0x5c>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	e000      	b.n	8001d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000008 	.word	0x20000008
 8001d4c:	20000004 	.word	0x20000004

08001d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_IncTick+0x20>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_IncTick+0x24>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <HAL_IncTick+0x24>)
 8001d62:	6013      	str	r3, [r2, #0]
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000008 	.word	0x20000008
 8001d74:	2000020c 	.word	0x2000020c

08001d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_GetTick+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	2000020c 	.word	0x2000020c

08001d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dac:	4013      	ands	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc2:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	60d3      	str	r3, [r2, #12]
}
 8001dc8:	bf00      	nop
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	f003 0307 	and.w	r3, r3, #7
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	db0b      	blt.n	8001e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	f003 021f 	and.w	r2, r3, #31
 8001e0c:	4907      	ldr	r1, [pc, #28]	; (8001e2c <__NVIC_EnableIRQ+0x38>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	2001      	movs	r0, #1
 8001e16:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000e100 	.word	0xe000e100

08001e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	db0a      	blt.n	8001e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	490c      	ldr	r1, [pc, #48]	; (8001e7c <__NVIC_SetPriority+0x4c>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	440b      	add	r3, r1
 8001e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e58:	e00a      	b.n	8001e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4908      	ldr	r1, [pc, #32]	; (8001e80 <__NVIC_SetPriority+0x50>)
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	3b04      	subs	r3, #4
 8001e68:	0112      	lsls	r2, r2, #4
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	761a      	strb	r2, [r3, #24]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000e100 	.word	0xe000e100
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f1c3 0307 	rsb	r3, r3, #7
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	bf28      	it	cs
 8001ea2:	2304      	movcs	r3, #4
 8001ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d902      	bls.n	8001eb4 <NVIC_EncodePriority+0x30>
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3b03      	subs	r3, #3
 8001eb2:	e000      	b.n	8001eb6 <NVIC_EncodePriority+0x32>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43d9      	mvns	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	4313      	orrs	r3, r2
         );
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3724      	adds	r7, #36	; 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001efc:	d301      	bcc.n	8001f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efe:	2301      	movs	r3, #1
 8001f00:	e00f      	b.n	8001f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <SysTick_Config+0x40>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f10:	f7ff ff8e 	bl	8001e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <SysTick_Config+0x40>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1a:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <SysTick_Config+0x40>)
 8001f1c:	2207      	movs	r2, #7
 8001f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	e000e010 	.word	0xe000e010

08001f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ff29 	bl	8001d90 <__NVIC_SetPriorityGrouping>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f58:	f7ff ff3e 	bl	8001dd8 <__NVIC_GetPriorityGrouping>
 8001f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	6978      	ldr	r0, [r7, #20]
 8001f64:	f7ff ff8e 	bl	8001e84 <NVIC_EncodePriority>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff5d 	bl	8001e30 <__NVIC_SetPriority>
}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff31 	bl	8001df4 <__NVIC_EnableIRQ>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ffa2 	bl	8001eec <SysTick_Config>
 8001fa8:	4603      	mov	r3, r0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fc0:	f7ff feda 	bl	8001d78 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e099      	b.n	8002104 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff0:	e00f      	b.n	8002012 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ff2:	f7ff fec1 	bl	8001d78 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b05      	cmp	r3, #5
 8001ffe:	d908      	bls.n	8002012 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2220      	movs	r2, #32
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2203      	movs	r2, #3
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e078      	b.n	8002104 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1e8      	bne.n	8001ff2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	4b38      	ldr	r3, [pc, #224]	; (800210c <HAL_DMA_Init+0x158>)
 800202c:	4013      	ands	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800203e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800204a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002056:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4313      	orrs	r3, r2
 8002062:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	2b04      	cmp	r3, #4
 800206a:	d107      	bne.n	800207c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	4313      	orrs	r3, r2
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4313      	orrs	r3, r2
 800207a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f023 0307 	bic.w	r3, r3, #7
 8002092:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	4313      	orrs	r3, r2
 800209c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d117      	bne.n	80020d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00e      	beq.n	80020d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f9e9 	bl	8002490 <DMA_CheckFifoParam>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2240      	movs	r2, #64	; 0x40
 80020c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020d2:	2301      	movs	r3, #1
 80020d4:	e016      	b.n	8002104 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f9a0 	bl	8002424 <DMA_CalcBaseAndBitshift>
 80020e4:	4603      	mov	r3, r0
 80020e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ec:	223f      	movs	r2, #63	; 0x3f
 80020ee:	409a      	lsls	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	f010803f 	.word	0xf010803f

08002110 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800211c:	4b92      	ldr	r3, [pc, #584]	; (8002368 <HAL_DMA_IRQHandler+0x258>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a92      	ldr	r2, [pc, #584]	; (800236c <HAL_DMA_IRQHandler+0x25c>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	0a9b      	lsrs	r3, r3, #10
 8002128:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213a:	2208      	movs	r2, #8
 800213c:	409a      	lsls	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4013      	ands	r3, r2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d01a      	beq.n	800217c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d013      	beq.n	800217c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0204 	bic.w	r2, r2, #4
 8002162:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002168:	2208      	movs	r2, #8
 800216a:	409a      	lsls	r2, r3
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002180:	2201      	movs	r2, #1
 8002182:	409a      	lsls	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d012      	beq.n	80021b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00b      	beq.n	80021b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219e:	2201      	movs	r2, #1
 80021a0:	409a      	lsls	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021aa:	f043 0202 	orr.w	r2, r3, #2
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b6:	2204      	movs	r2, #4
 80021b8:	409a      	lsls	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4013      	ands	r3, r2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d012      	beq.n	80021e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00b      	beq.n	80021e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d4:	2204      	movs	r2, #4
 80021d6:	409a      	lsls	r2, r3
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e0:	f043 0204 	orr.w	r2, r3, #4
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ec:	2210      	movs	r2, #16
 80021ee:	409a      	lsls	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d043      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d03c      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220a:	2210      	movs	r2, #16
 800220c:	409a      	lsls	r2, r3
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d018      	beq.n	8002252 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d108      	bne.n	8002240 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d024      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	4798      	blx	r3
 800223e:	e01f      	b.n	8002280 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01b      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
 8002250:	e016      	b.n	8002280 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d107      	bne.n	8002270 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0208 	bic.w	r2, r2, #8
 800226e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002284:	2220      	movs	r2, #32
 8002286:	409a      	lsls	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 808e 	beq.w	80023ae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 8086 	beq.w	80023ae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a6:	2220      	movs	r2, #32
 80022a8:	409a      	lsls	r2, r3
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b05      	cmp	r3, #5
 80022b8:	d136      	bne.n	8002328 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0216 	bic.w	r2, r2, #22
 80022c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d103      	bne.n	80022ea <HAL_DMA_IRQHandler+0x1da>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d007      	beq.n	80022fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0208 	bic.w	r2, r2, #8
 80022f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fe:	223f      	movs	r2, #63	; 0x3f
 8002300:	409a      	lsls	r2, r3
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231a:	2b00      	cmp	r3, #0
 800231c:	d07d      	beq.n	800241a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	4798      	blx	r3
        }
        return;
 8002326:	e078      	b.n	800241a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01c      	beq.n	8002370 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d108      	bne.n	8002356 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002348:	2b00      	cmp	r3, #0
 800234a:	d030      	beq.n	80023ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4798      	blx	r3
 8002354:	e02b      	b.n	80023ae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235a:	2b00      	cmp	r3, #0
 800235c:	d027      	beq.n	80023ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	4798      	blx	r3
 8002366:	e022      	b.n	80023ae <HAL_DMA_IRQHandler+0x29e>
 8002368:	20000000 	.word	0x20000000
 800236c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10f      	bne.n	800239e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0210 	bic.w	r2, r2, #16
 800238c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d032      	beq.n	800241c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d022      	beq.n	8002408 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2205      	movs	r2, #5
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0201 	bic.w	r2, r2, #1
 80023d8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	3301      	adds	r3, #1
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d307      	bcc.n	80023f6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f2      	bne.n	80023da <HAL_DMA_IRQHandler+0x2ca>
 80023f4:	e000      	b.n	80023f8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80023f6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
 8002418:	e000      	b.n	800241c <HAL_DMA_IRQHandler+0x30c>
        return;
 800241a:	bf00      	nop
    }
  }
}
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop

08002424 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	3b10      	subs	r3, #16
 8002434:	4a14      	ldr	r2, [pc, #80]	; (8002488 <DMA_CalcBaseAndBitshift+0x64>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800243e:	4a13      	ldr	r2, [pc, #76]	; (800248c <DMA_CalcBaseAndBitshift+0x68>)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4413      	add	r3, r2
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b03      	cmp	r3, #3
 8002450:	d909      	bls.n	8002466 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800245a:	f023 0303 	bic.w	r3, r3, #3
 800245e:	1d1a      	adds	r2, r3, #4
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	659a      	str	r2, [r3, #88]	; 0x58
 8002464:	e007      	b.n	8002476 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800246e:	f023 0303 	bic.w	r3, r3, #3
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	aaaaaaab 	.word	0xaaaaaaab
 800248c:	08003908 	.word	0x08003908

08002490 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d11f      	bne.n	80024ea <DMA_CheckFifoParam+0x5a>
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d856      	bhi.n	800255e <DMA_CheckFifoParam+0xce>
 80024b0:	a201      	add	r2, pc, #4	; (adr r2, 80024b8 <DMA_CheckFifoParam+0x28>)
 80024b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b6:	bf00      	nop
 80024b8:	080024c9 	.word	0x080024c9
 80024bc:	080024db 	.word	0x080024db
 80024c0:	080024c9 	.word	0x080024c9
 80024c4:	0800255f 	.word	0x0800255f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d046      	beq.n	8002562 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d8:	e043      	b.n	8002562 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024e2:	d140      	bne.n	8002566 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e8:	e03d      	b.n	8002566 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f2:	d121      	bne.n	8002538 <DMA_CheckFifoParam+0xa8>
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d837      	bhi.n	800256a <DMA_CheckFifoParam+0xda>
 80024fa:	a201      	add	r2, pc, #4	; (adr r2, 8002500 <DMA_CheckFifoParam+0x70>)
 80024fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002500:	08002511 	.word	0x08002511
 8002504:	08002517 	.word	0x08002517
 8002508:	08002511 	.word	0x08002511
 800250c:	08002529 	.word	0x08002529
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
      break;
 8002514:	e030      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d025      	beq.n	800256e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002526:	e022      	b.n	800256e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002530:	d11f      	bne.n	8002572 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002536:	e01c      	b.n	8002572 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d903      	bls.n	8002546 <DMA_CheckFifoParam+0xb6>
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d003      	beq.n	800254c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002544:	e018      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
      break;
 800254a:	e015      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00e      	beq.n	8002576 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
      break;
 800255c:	e00b      	b.n	8002576 <DMA_CheckFifoParam+0xe6>
      break;
 800255e:	bf00      	nop
 8002560:	e00a      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      break;
 8002562:	bf00      	nop
 8002564:	e008      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      break;
 8002566:	bf00      	nop
 8002568:	e006      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      break;
 800256a:	bf00      	nop
 800256c:	e004      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      break;
 800256e:	bf00      	nop
 8002570:	e002      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      break;   
 8002572:	bf00      	nop
 8002574:	e000      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      break;
 8002576:	bf00      	nop
    }
  } 
  
  return status; 
 8002578:	7bfb      	ldrb	r3, [r7, #15]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop

08002588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	e159      	b.n	8002858 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025a4:	2201      	movs	r2, #1
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	429a      	cmp	r2, r3
 80025be:	f040 8148 	bne.w	8002852 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d005      	beq.n	80025da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d130      	bne.n	800263c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	2203      	movs	r2, #3
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002610:	2201      	movs	r2, #1
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f003 0201 	and.w	r2, r3, #1
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b03      	cmp	r3, #3
 8002646:	d017      	beq.n	8002678 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	2203      	movs	r2, #3
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d123      	bne.n	80026cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	08da      	lsrs	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3208      	adds	r2, #8
 800268c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	220f      	movs	r2, #15
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	08da      	lsrs	r2, r3, #3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3208      	adds	r2, #8
 80026c6:	69b9      	ldr	r1, [r7, #24]
 80026c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0203 	and.w	r2, r3, #3
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80a2 	beq.w	8002852 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	4b57      	ldr	r3, [pc, #348]	; (8002870 <HAL_GPIO_Init+0x2e8>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	4a56      	ldr	r2, [pc, #344]	; (8002870 <HAL_GPIO_Init+0x2e8>)
 8002718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800271c:	6453      	str	r3, [r2, #68]	; 0x44
 800271e:	4b54      	ldr	r3, [pc, #336]	; (8002870 <HAL_GPIO_Init+0x2e8>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800272a:	4a52      	ldr	r2, [pc, #328]	; (8002874 <HAL_GPIO_Init+0x2ec>)
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	089b      	lsrs	r3, r3, #2
 8002730:	3302      	adds	r3, #2
 8002732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	220f      	movs	r2, #15
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a49      	ldr	r2, [pc, #292]	; (8002878 <HAL_GPIO_Init+0x2f0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d019      	beq.n	800278a <HAL_GPIO_Init+0x202>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a48      	ldr	r2, [pc, #288]	; (800287c <HAL_GPIO_Init+0x2f4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <HAL_GPIO_Init+0x1fe>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a47      	ldr	r2, [pc, #284]	; (8002880 <HAL_GPIO_Init+0x2f8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00d      	beq.n	8002782 <HAL_GPIO_Init+0x1fa>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a46      	ldr	r2, [pc, #280]	; (8002884 <HAL_GPIO_Init+0x2fc>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <HAL_GPIO_Init+0x1f6>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a45      	ldr	r2, [pc, #276]	; (8002888 <HAL_GPIO_Init+0x300>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d101      	bne.n	800277a <HAL_GPIO_Init+0x1f2>
 8002776:	2304      	movs	r3, #4
 8002778:	e008      	b.n	800278c <HAL_GPIO_Init+0x204>
 800277a:	2307      	movs	r3, #7
 800277c:	e006      	b.n	800278c <HAL_GPIO_Init+0x204>
 800277e:	2303      	movs	r3, #3
 8002780:	e004      	b.n	800278c <HAL_GPIO_Init+0x204>
 8002782:	2302      	movs	r3, #2
 8002784:	e002      	b.n	800278c <HAL_GPIO_Init+0x204>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_GPIO_Init+0x204>
 800278a:	2300      	movs	r3, #0
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	f002 0203 	and.w	r2, r2, #3
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	4093      	lsls	r3, r2
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800279c:	4935      	ldr	r1, [pc, #212]	; (8002874 <HAL_GPIO_Init+0x2ec>)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	3302      	adds	r3, #2
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027aa:	4b38      	ldr	r3, [pc, #224]	; (800288c <HAL_GPIO_Init+0x304>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ce:	4a2f      	ldr	r2, [pc, #188]	; (800288c <HAL_GPIO_Init+0x304>)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027d4:	4b2d      	ldr	r3, [pc, #180]	; (800288c <HAL_GPIO_Init+0x304>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027f8:	4a24      	ldr	r2, [pc, #144]	; (800288c <HAL_GPIO_Init+0x304>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027fe:	4b23      	ldr	r3, [pc, #140]	; (800288c <HAL_GPIO_Init+0x304>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002822:	4a1a      	ldr	r2, [pc, #104]	; (800288c <HAL_GPIO_Init+0x304>)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002828:	4b18      	ldr	r3, [pc, #96]	; (800288c <HAL_GPIO_Init+0x304>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800284c:	4a0f      	ldr	r2, [pc, #60]	; (800288c <HAL_GPIO_Init+0x304>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3301      	adds	r3, #1
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	2b0f      	cmp	r3, #15
 800285c:	f67f aea2 	bls.w	80025a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3724      	adds	r7, #36	; 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	40013800 	.word	0x40013800
 8002878:	40020000 	.word	0x40020000
 800287c:	40020400 	.word	0x40020400
 8002880:	40020800 	.word	0x40020800
 8002884:	40020c00 	.word	0x40020c00
 8002888:	40021000 	.word	0x40021000
 800288c:	40013c00 	.word	0x40013c00

08002890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	807b      	strh	r3, [r7, #2]
 800289c:	4613      	mov	r3, r2
 800289e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a0:	787b      	ldrb	r3, [r7, #1]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a6:	887a      	ldrh	r2, [r7, #2]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028ac:	e003      	b.n	80028b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ae:	887b      	ldrh	r3, [r7, #2]
 80028b0:	041a      	lsls	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	619a      	str	r2, [r3, #24]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e12b      	b.n	8002b2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fe ffda 	bl	80018a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2224      	movs	r2, #36	; 0x24
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002916:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002926:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002928:	f000 fd5c 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 800292c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4a81      	ldr	r2, [pc, #516]	; (8002b38 <HAL_I2C_Init+0x274>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d807      	bhi.n	8002948 <HAL_I2C_Init+0x84>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4a80      	ldr	r2, [pc, #512]	; (8002b3c <HAL_I2C_Init+0x278>)
 800293c:	4293      	cmp	r3, r2
 800293e:	bf94      	ite	ls
 8002940:	2301      	movls	r3, #1
 8002942:	2300      	movhi	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	e006      	b.n	8002956 <HAL_I2C_Init+0x92>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4a7d      	ldr	r2, [pc, #500]	; (8002b40 <HAL_I2C_Init+0x27c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	bf94      	ite	ls
 8002950:	2301      	movls	r3, #1
 8002952:	2300      	movhi	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e0e7      	b.n	8002b2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4a78      	ldr	r2, [pc, #480]	; (8002b44 <HAL_I2C_Init+0x280>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0c9b      	lsrs	r3, r3, #18
 8002968:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4a6a      	ldr	r2, [pc, #424]	; (8002b38 <HAL_I2C_Init+0x274>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d802      	bhi.n	8002998 <HAL_I2C_Init+0xd4>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	3301      	adds	r3, #1
 8002996:	e009      	b.n	80029ac <HAL_I2C_Init+0xe8>
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	4a69      	ldr	r2, [pc, #420]	; (8002b48 <HAL_I2C_Init+0x284>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	099b      	lsrs	r3, r3, #6
 80029aa:	3301      	adds	r3, #1
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	430b      	orrs	r3, r1
 80029b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	495c      	ldr	r1, [pc, #368]	; (8002b38 <HAL_I2C_Init+0x274>)
 80029c8:	428b      	cmp	r3, r1
 80029ca:	d819      	bhi.n	8002a00 <HAL_I2C_Init+0x13c>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1e59      	subs	r1, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029da:	1c59      	adds	r1, r3, #1
 80029dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029e0:	400b      	ands	r3, r1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_I2C_Init+0x138>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1e59      	subs	r1, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80029f4:	3301      	adds	r3, #1
 80029f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fa:	e051      	b.n	8002aa0 <HAL_I2C_Init+0x1dc>
 80029fc:	2304      	movs	r3, #4
 80029fe:	e04f      	b.n	8002aa0 <HAL_I2C_Init+0x1dc>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d111      	bne.n	8002a2c <HAL_I2C_Init+0x168>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1e58      	subs	r0, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6859      	ldr	r1, [r3, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	440b      	add	r3, r1
 8002a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	e012      	b.n	8002a52 <HAL_I2C_Init+0x18e>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1e58      	subs	r0, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	0099      	lsls	r1, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a42:	3301      	adds	r3, #1
 8002a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_I2C_Init+0x196>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e022      	b.n	8002aa0 <HAL_I2C_Init+0x1dc>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10e      	bne.n	8002a80 <HAL_I2C_Init+0x1bc>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1e58      	subs	r0, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6859      	ldr	r1, [r3, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	440b      	add	r3, r1
 8002a70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a74:	3301      	adds	r3, #1
 8002a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a7e:	e00f      	b.n	8002aa0 <HAL_I2C_Init+0x1dc>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1e58      	subs	r0, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	0099      	lsls	r1, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a96:	3301      	adds	r3, #1
 8002a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	6809      	ldr	r1, [r1, #0]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69da      	ldr	r2, [r3, #28]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ace:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6911      	ldr	r1, [r2, #16]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68d2      	ldr	r2, [r2, #12]
 8002ada:	4311      	orrs	r1, r2
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695a      	ldr	r2, [r3, #20]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	000186a0 	.word	0x000186a0
 8002b3c:	001e847f 	.word	0x001e847f
 8002b40:	003d08ff 	.word	0x003d08ff
 8002b44:	431bde83 	.word	0x431bde83
 8002b48:	10624dd3 	.word	0x10624dd3

08002b4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e264      	b.n	8003028 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d075      	beq.n	8002c56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b6a:	4ba3      	ldr	r3, [pc, #652]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d00c      	beq.n	8002b90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b76:	4ba0      	ldr	r3, [pc, #640]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d112      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b82:	4b9d      	ldr	r3, [pc, #628]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b8e:	d10b      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b90:	4b99      	ldr	r3, [pc, #612]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d05b      	beq.n	8002c54 <HAL_RCC_OscConfig+0x108>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d157      	bne.n	8002c54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e23f      	b.n	8003028 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb0:	d106      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x74>
 8002bb2:	4b91      	ldr	r3, [pc, #580]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a90      	ldr	r2, [pc, #576]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	e01d      	b.n	8002bfc <HAL_RCC_OscConfig+0xb0>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x98>
 8002bca:	4b8b      	ldr	r3, [pc, #556]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a8a      	ldr	r2, [pc, #552]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	4b88      	ldr	r3, [pc, #544]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a87      	ldr	r2, [pc, #540]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	e00b      	b.n	8002bfc <HAL_RCC_OscConfig+0xb0>
 8002be4:	4b84      	ldr	r3, [pc, #528]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a83      	ldr	r2, [pc, #524]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	4b81      	ldr	r3, [pc, #516]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a80      	ldr	r2, [pc, #512]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d013      	beq.n	8002c2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c04:	f7ff f8b8 	bl	8001d78 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c0c:	f7ff f8b4 	bl	8001d78 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b64      	cmp	r3, #100	; 0x64
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e204      	b.n	8003028 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1e:	4b76      	ldr	r3, [pc, #472]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0xc0>
 8002c2a:	e014      	b.n	8002c56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7ff f8a4 	bl	8001d78 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c34:	f7ff f8a0 	bl	8001d78 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e1f0      	b.n	8003028 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c46:	4b6c      	ldr	r3, [pc, #432]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0xe8>
 8002c52:	e000      	b.n	8002c56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d063      	beq.n	8002d2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c62:	4b65      	ldr	r3, [pc, #404]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 030c 	and.w	r3, r3, #12
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00b      	beq.n	8002c86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c6e:	4b62      	ldr	r3, [pc, #392]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d11c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c7a:	4b5f      	ldr	r3, [pc, #380]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d116      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c86:	4b5c      	ldr	r3, [pc, #368]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d005      	beq.n	8002c9e <HAL_RCC_OscConfig+0x152>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d001      	beq.n	8002c9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e1c4      	b.n	8003028 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9e:	4b56      	ldr	r3, [pc, #344]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4952      	ldr	r1, [pc, #328]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb2:	e03a      	b.n	8002d2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d020      	beq.n	8002cfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cbc:	4b4f      	ldr	r3, [pc, #316]	; (8002dfc <HAL_RCC_OscConfig+0x2b0>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc2:	f7ff f859 	bl	8001d78 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cca:	f7ff f855 	bl	8001d78 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e1a5      	b.n	8003028 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cdc:	4b46      	ldr	r3, [pc, #280]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f0      	beq.n	8002cca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce8:	4b43      	ldr	r3, [pc, #268]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4940      	ldr	r1, [pc, #256]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	600b      	str	r3, [r1, #0]
 8002cfc:	e015      	b.n	8002d2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cfe:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <HAL_RCC_OscConfig+0x2b0>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7ff f838 	bl	8001d78 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d0c:	f7ff f834 	bl	8001d78 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e184      	b.n	8003028 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1e:	4b36      	ldr	r3, [pc, #216]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d030      	beq.n	8002d98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d016      	beq.n	8002d6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d3e:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <HAL_RCC_OscConfig+0x2b4>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d44:	f7ff f818 	bl	8001d78 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d4c:	f7ff f814 	bl	8001d78 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e164      	b.n	8003028 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5e:	4b26      	ldr	r3, [pc, #152]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0x200>
 8002d6a:	e015      	b.n	8002d98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d6c:	4b24      	ldr	r3, [pc, #144]	; (8002e00 <HAL_RCC_OscConfig+0x2b4>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d72:	f7ff f801 	bl	8001d78 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d7a:	f7fe fffd 	bl	8001d78 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e14d      	b.n	8003028 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8c:	4b1a      	ldr	r3, [pc, #104]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f0      	bne.n	8002d7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80a0 	beq.w	8002ee6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002da6:	2300      	movs	r3, #0
 8002da8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002daa:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10f      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	4a0e      	ldr	r2, [pc, #56]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc6:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_RCC_OscConfig+0x2b8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d121      	bne.n	8002e26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <HAL_RCC_OscConfig+0x2b8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a07      	ldr	r2, [pc, #28]	; (8002e04 <HAL_RCC_OscConfig+0x2b8>)
 8002de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dee:	f7fe ffc3 	bl	8001d78 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df4:	e011      	b.n	8002e1a <HAL_RCC_OscConfig+0x2ce>
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	42470000 	.word	0x42470000
 8002e00:	42470e80 	.word	0x42470e80
 8002e04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e08:	f7fe ffb6 	bl	8001d78 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e106      	b.n	8003028 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1a:	4b85      	ldr	r3, [pc, #532]	; (8003030 <HAL_RCC_OscConfig+0x4e4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d106      	bne.n	8002e3c <HAL_RCC_OscConfig+0x2f0>
 8002e2e:	4b81      	ldr	r3, [pc, #516]	; (8003034 <HAL_RCC_OscConfig+0x4e8>)
 8002e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e32:	4a80      	ldr	r2, [pc, #512]	; (8003034 <HAL_RCC_OscConfig+0x4e8>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3a:	e01c      	b.n	8002e76 <HAL_RCC_OscConfig+0x32a>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b05      	cmp	r3, #5
 8002e42:	d10c      	bne.n	8002e5e <HAL_RCC_OscConfig+0x312>
 8002e44:	4b7b      	ldr	r3, [pc, #492]	; (8003034 <HAL_RCC_OscConfig+0x4e8>)
 8002e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e48:	4a7a      	ldr	r2, [pc, #488]	; (8003034 <HAL_RCC_OscConfig+0x4e8>)
 8002e4a:	f043 0304 	orr.w	r3, r3, #4
 8002e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e50:	4b78      	ldr	r3, [pc, #480]	; (8003034 <HAL_RCC_OscConfig+0x4e8>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e54:	4a77      	ldr	r2, [pc, #476]	; (8003034 <HAL_RCC_OscConfig+0x4e8>)
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5c:	e00b      	b.n	8002e76 <HAL_RCC_OscConfig+0x32a>
 8002e5e:	4b75      	ldr	r3, [pc, #468]	; (8003034 <HAL_RCC_OscConfig+0x4e8>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e62:	4a74      	ldr	r2, [pc, #464]	; (8003034 <HAL_RCC_OscConfig+0x4e8>)
 8002e64:	f023 0301 	bic.w	r3, r3, #1
 8002e68:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6a:	4b72      	ldr	r3, [pc, #456]	; (8003034 <HAL_RCC_OscConfig+0x4e8>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6e:	4a71      	ldr	r2, [pc, #452]	; (8003034 <HAL_RCC_OscConfig+0x4e8>)
 8002e70:	f023 0304 	bic.w	r3, r3, #4
 8002e74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d015      	beq.n	8002eaa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7e:	f7fe ff7b 	bl	8001d78 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e84:	e00a      	b.n	8002e9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e86:	f7fe ff77 	bl	8001d78 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e0c5      	b.n	8003028 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9c:	4b65      	ldr	r3, [pc, #404]	; (8003034 <HAL_RCC_OscConfig+0x4e8>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0ee      	beq.n	8002e86 <HAL_RCC_OscConfig+0x33a>
 8002ea8:	e014      	b.n	8002ed4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eaa:	f7fe ff65 	bl	8001d78 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb0:	e00a      	b.n	8002ec8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb2:	f7fe ff61 	bl	8001d78 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e0af      	b.n	8003028 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec8:	4b5a      	ldr	r3, [pc, #360]	; (8003034 <HAL_RCC_OscConfig+0x4e8>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1ee      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ed4:	7dfb      	ldrb	r3, [r7, #23]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d105      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eda:	4b56      	ldr	r3, [pc, #344]	; (8003034 <HAL_RCC_OscConfig+0x4e8>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	4a55      	ldr	r2, [pc, #340]	; (8003034 <HAL_RCC_OscConfig+0x4e8>)
 8002ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ee4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 809b 	beq.w	8003026 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ef0:	4b50      	ldr	r3, [pc, #320]	; (8003034 <HAL_RCC_OscConfig+0x4e8>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 030c 	and.w	r3, r3, #12
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d05c      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d141      	bne.n	8002f88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f04:	4b4c      	ldr	r3, [pc, #304]	; (8003038 <HAL_RCC_OscConfig+0x4ec>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0a:	f7fe ff35 	bl	8001d78 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f12:	f7fe ff31 	bl	8001d78 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e081      	b.n	8003028 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f24:	4b43      	ldr	r3, [pc, #268]	; (8003034 <HAL_RCC_OscConfig+0x4e8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f0      	bne.n	8002f12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69da      	ldr	r2, [r3, #28]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	019b      	lsls	r3, r3, #6
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	085b      	lsrs	r3, r3, #1
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	041b      	lsls	r3, r3, #16
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	061b      	lsls	r3, r3, #24
 8002f54:	4937      	ldr	r1, [pc, #220]	; (8003034 <HAL_RCC_OscConfig+0x4e8>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f5a:	4b37      	ldr	r3, [pc, #220]	; (8003038 <HAL_RCC_OscConfig+0x4ec>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7fe ff0a 	bl	8001d78 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f68:	f7fe ff06 	bl	8001d78 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e056      	b.n	8003028 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7a:	4b2e      	ldr	r3, [pc, #184]	; (8003034 <HAL_RCC_OscConfig+0x4e8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0x41c>
 8002f86:	e04e      	b.n	8003026 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f88:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <HAL_RCC_OscConfig+0x4ec>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fe fef3 	bl	8001d78 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f96:	f7fe feef 	bl	8001d78 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e03f      	b.n	8003028 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa8:	4b22      	ldr	r3, [pc, #136]	; (8003034 <HAL_RCC_OscConfig+0x4e8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCC_OscConfig+0x44a>
 8002fb4:	e037      	b.n	8003026 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e032      	b.n	8003028 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <HAL_RCC_OscConfig+0x4e8>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d028      	beq.n	8003022 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d121      	bne.n	8003022 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d11a      	bne.n	8003022 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ff8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d111      	bne.n	8003022 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	085b      	lsrs	r3, r3, #1
 800300a:	3b01      	subs	r3, #1
 800300c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800300e:	429a      	cmp	r2, r3
 8003010:	d107      	bne.n	8003022 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800301e:	429a      	cmp	r2, r3
 8003020:	d001      	beq.n	8003026 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40007000 	.word	0x40007000
 8003034:	40023800 	.word	0x40023800
 8003038:	42470060 	.word	0x42470060

0800303c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0cc      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003050:	4b68      	ldr	r3, [pc, #416]	; (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d90c      	bls.n	8003078 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305e:	4b65      	ldr	r3, [pc, #404]	; (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b63      	ldr	r3, [pc, #396]	; (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0b8      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003090:	4b59      	ldr	r3, [pc, #356]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	4a58      	ldr	r2, [pc, #352]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800309a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a8:	4b53      	ldr	r3, [pc, #332]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a52      	ldr	r2, [pc, #328]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b4:	4b50      	ldr	r3, [pc, #320]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	494d      	ldr	r1, [pc, #308]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d044      	beq.n	800315c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b47      	ldr	r3, [pc, #284]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d119      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e07f      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d003      	beq.n	80030fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d107      	bne.n	800310a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fa:	4b3f      	ldr	r3, [pc, #252]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e06f      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310a:	4b3b      	ldr	r3, [pc, #236]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e067      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800311a:	4b37      	ldr	r3, [pc, #220]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f023 0203 	bic.w	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	4934      	ldr	r1, [pc, #208]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	4313      	orrs	r3, r2
 800312a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800312c:	f7fe fe24 	bl	8001d78 <HAL_GetTick>
 8003130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	e00a      	b.n	800314a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003134:	f7fe fe20 	bl	8001d78 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e04f      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	4b2b      	ldr	r3, [pc, #172]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 020c 	and.w	r2, r3, #12
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	429a      	cmp	r2, r3
 800315a:	d1eb      	bne.n	8003134 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800315c:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d20c      	bcs.n	8003184 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e032      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003190:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4916      	ldr	r1, [pc, #88]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	490e      	ldr	r1, [pc, #56]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031c2:	f000 f821 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 80031c6:	4602      	mov	r2, r0
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	490a      	ldr	r1, [pc, #40]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 80031d4:	5ccb      	ldrb	r3, [r1, r3]
 80031d6:	fa22 f303 	lsr.w	r3, r2, r3
 80031da:	4a09      	ldr	r2, [pc, #36]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_RCC_ClockConfig+0x1c8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe fd84 	bl	8001cf0 <HAL_InitTick>

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40023c00 	.word	0x40023c00
 80031f8:	40023800 	.word	0x40023800
 80031fc:	080038f0 	.word	0x080038f0
 8003200:	20000000 	.word	0x20000000
 8003204:	20000004 	.word	0x20000004

08003208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003208:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	607b      	str	r3, [r7, #4]
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	2300      	movs	r3, #0
 800321a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003220:	4b67      	ldr	r3, [pc, #412]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 030c 	and.w	r3, r3, #12
 8003228:	2b08      	cmp	r3, #8
 800322a:	d00d      	beq.n	8003248 <HAL_RCC_GetSysClockFreq+0x40>
 800322c:	2b08      	cmp	r3, #8
 800322e:	f200 80bd 	bhi.w	80033ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0x34>
 8003236:	2b04      	cmp	r3, #4
 8003238:	d003      	beq.n	8003242 <HAL_RCC_GetSysClockFreq+0x3a>
 800323a:	e0b7      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800323c:	4b61      	ldr	r3, [pc, #388]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800323e:	60bb      	str	r3, [r7, #8]
       break;
 8003240:	e0b7      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003242:	4b61      	ldr	r3, [pc, #388]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003244:	60bb      	str	r3, [r7, #8]
      break;
 8003246:	e0b4      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003248:	4b5d      	ldr	r3, [pc, #372]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003250:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003252:	4b5b      	ldr	r3, [pc, #364]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d04d      	beq.n	80032fa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800325e:	4b58      	ldr	r3, [pc, #352]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	099b      	lsrs	r3, r3, #6
 8003264:	461a      	mov	r2, r3
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800326e:	f04f 0100 	mov.w	r1, #0
 8003272:	ea02 0800 	and.w	r8, r2, r0
 8003276:	ea03 0901 	and.w	r9, r3, r1
 800327a:	4640      	mov	r0, r8
 800327c:	4649      	mov	r1, r9
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	014b      	lsls	r3, r1, #5
 8003288:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800328c:	0142      	lsls	r2, r0, #5
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	ebb0 0008 	subs.w	r0, r0, r8
 8003296:	eb61 0109 	sbc.w	r1, r1, r9
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	018b      	lsls	r3, r1, #6
 80032a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032a8:	0182      	lsls	r2, r0, #6
 80032aa:	1a12      	subs	r2, r2, r0
 80032ac:	eb63 0301 	sbc.w	r3, r3, r1
 80032b0:	f04f 0000 	mov.w	r0, #0
 80032b4:	f04f 0100 	mov.w	r1, #0
 80032b8:	00d9      	lsls	r1, r3, #3
 80032ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032be:	00d0      	lsls	r0, r2, #3
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	eb12 0208 	adds.w	r2, r2, r8
 80032c8:	eb43 0309 	adc.w	r3, r3, r9
 80032cc:	f04f 0000 	mov.w	r0, #0
 80032d0:	f04f 0100 	mov.w	r1, #0
 80032d4:	0259      	lsls	r1, r3, #9
 80032d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80032da:	0250      	lsls	r0, r2, #9
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4610      	mov	r0, r2
 80032e2:	4619      	mov	r1, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	461a      	mov	r2, r3
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	f7fd fb62 	bl	80009b4 <__aeabi_uldivmod>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4613      	mov	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	e04a      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fa:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	099b      	lsrs	r3, r3, #6
 8003300:	461a      	mov	r2, r3
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	f240 10ff 	movw	r0, #511	; 0x1ff
 800330a:	f04f 0100 	mov.w	r1, #0
 800330e:	ea02 0400 	and.w	r4, r2, r0
 8003312:	ea03 0501 	and.w	r5, r3, r1
 8003316:	4620      	mov	r0, r4
 8003318:	4629      	mov	r1, r5
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	014b      	lsls	r3, r1, #5
 8003324:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003328:	0142      	lsls	r2, r0, #5
 800332a:	4610      	mov	r0, r2
 800332c:	4619      	mov	r1, r3
 800332e:	1b00      	subs	r0, r0, r4
 8003330:	eb61 0105 	sbc.w	r1, r1, r5
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	018b      	lsls	r3, r1, #6
 800333e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003342:	0182      	lsls	r2, r0, #6
 8003344:	1a12      	subs	r2, r2, r0
 8003346:	eb63 0301 	sbc.w	r3, r3, r1
 800334a:	f04f 0000 	mov.w	r0, #0
 800334e:	f04f 0100 	mov.w	r1, #0
 8003352:	00d9      	lsls	r1, r3, #3
 8003354:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003358:	00d0      	lsls	r0, r2, #3
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	1912      	adds	r2, r2, r4
 8003360:	eb45 0303 	adc.w	r3, r5, r3
 8003364:	f04f 0000 	mov.w	r0, #0
 8003368:	f04f 0100 	mov.w	r1, #0
 800336c:	0299      	lsls	r1, r3, #10
 800336e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003372:	0290      	lsls	r0, r2, #10
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	461a      	mov	r2, r3
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	f7fd fb16 	bl	80009b4 <__aeabi_uldivmod>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4613      	mov	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	0c1b      	lsrs	r3, r3, #16
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	3301      	adds	r3, #1
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a8:	60bb      	str	r3, [r7, #8]
      break;
 80033aa:	e002      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033ae:	60bb      	str	r3, [r7, #8]
      break;
 80033b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033b2:	68bb      	ldr	r3, [r7, #8]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	00f42400 	.word	0x00f42400
 80033c8:	007a1200 	.word	0x007a1200

080033cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033d2:	681b      	ldr	r3, [r3, #0]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20000000 	.word	0x20000000

080033e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033e8:	f7ff fff0 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 80033ec:	4602      	mov	r2, r0
 80033ee:	4b05      	ldr	r3, [pc, #20]	; (8003404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	0a9b      	lsrs	r3, r3, #10
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	4903      	ldr	r1, [pc, #12]	; (8003408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033fa:	5ccb      	ldrb	r3, [r1, r3]
 80033fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40023800 	.word	0x40023800
 8003408:	08003900 	.word	0x08003900

0800340c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003410:	f7ff ffdc 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 8003414:	4602      	mov	r2, r0
 8003416:	4b05      	ldr	r3, [pc, #20]	; (800342c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	0b5b      	lsrs	r3, r3, #13
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	4903      	ldr	r1, [pc, #12]	; (8003430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003422:	5ccb      	ldrb	r3, [r1, r3]
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40023800 	.word	0x40023800
 8003430:	08003900 	.word	0x08003900

08003434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e03f      	b.n	80034c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fe fb08 	bl	8001a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2224      	movs	r2, #36	; 0x24
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f829 	bl	80034d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800348c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695a      	ldr	r2, [r3, #20]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800349c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d4:	b09f      	sub	sp, #124	; 0x7c
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e6:	68d9      	ldr	r1, [r3, #12]
 80034e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	ea40 0301 	orr.w	r3, r0, r1
 80034f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	431a      	orrs	r2, r3
 8003502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	4313      	orrs	r3, r2
 8003508:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800350a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003514:	f021 010c 	bic.w	r1, r1, #12
 8003518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800351e:	430b      	orrs	r3, r1
 8003520:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800352c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352e:	6999      	ldr	r1, [r3, #24]
 8003530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	ea40 0301 	orr.w	r3, r0, r1
 8003538:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800353a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4bc5      	ldr	r3, [pc, #788]	; (8003854 <UART_SetConfig+0x384>)
 8003540:	429a      	cmp	r2, r3
 8003542:	d004      	beq.n	800354e <UART_SetConfig+0x7e>
 8003544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4bc3      	ldr	r3, [pc, #780]	; (8003858 <UART_SetConfig+0x388>)
 800354a:	429a      	cmp	r2, r3
 800354c:	d103      	bne.n	8003556 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800354e:	f7ff ff5d 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 8003552:	6778      	str	r0, [r7, #116]	; 0x74
 8003554:	e002      	b.n	800355c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003556:	f7ff ff45 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 800355a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800355c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003564:	f040 80b6 	bne.w	80036d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800356a:	461c      	mov	r4, r3
 800356c:	f04f 0500 	mov.w	r5, #0
 8003570:	4622      	mov	r2, r4
 8003572:	462b      	mov	r3, r5
 8003574:	1891      	adds	r1, r2, r2
 8003576:	6439      	str	r1, [r7, #64]	; 0x40
 8003578:	415b      	adcs	r3, r3
 800357a:	647b      	str	r3, [r7, #68]	; 0x44
 800357c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003580:	1912      	adds	r2, r2, r4
 8003582:	eb45 0303 	adc.w	r3, r5, r3
 8003586:	f04f 0000 	mov.w	r0, #0
 800358a:	f04f 0100 	mov.w	r1, #0
 800358e:	00d9      	lsls	r1, r3, #3
 8003590:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003594:	00d0      	lsls	r0, r2, #3
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	1911      	adds	r1, r2, r4
 800359c:	6639      	str	r1, [r7, #96]	; 0x60
 800359e:	416b      	adcs	r3, r5
 80035a0:	667b      	str	r3, [r7, #100]	; 0x64
 80035a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	461a      	mov	r2, r3
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	1891      	adds	r1, r2, r2
 80035ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80035b0:	415b      	adcs	r3, r3
 80035b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80035bc:	f7fd f9fa 	bl	80009b4 <__aeabi_uldivmod>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4ba5      	ldr	r3, [pc, #660]	; (800385c <UART_SetConfig+0x38c>)
 80035c6:	fba3 2302 	umull	r2, r3, r3, r2
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	011e      	lsls	r6, r3, #4
 80035ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035d0:	461c      	mov	r4, r3
 80035d2:	f04f 0500 	mov.w	r5, #0
 80035d6:	4622      	mov	r2, r4
 80035d8:	462b      	mov	r3, r5
 80035da:	1891      	adds	r1, r2, r2
 80035dc:	6339      	str	r1, [r7, #48]	; 0x30
 80035de:	415b      	adcs	r3, r3
 80035e0:	637b      	str	r3, [r7, #52]	; 0x34
 80035e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035e6:	1912      	adds	r2, r2, r4
 80035e8:	eb45 0303 	adc.w	r3, r5, r3
 80035ec:	f04f 0000 	mov.w	r0, #0
 80035f0:	f04f 0100 	mov.w	r1, #0
 80035f4:	00d9      	lsls	r1, r3, #3
 80035f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035fa:	00d0      	lsls	r0, r2, #3
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	1911      	adds	r1, r2, r4
 8003602:	65b9      	str	r1, [r7, #88]	; 0x58
 8003604:	416b      	adcs	r3, r5
 8003606:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	461a      	mov	r2, r3
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	1891      	adds	r1, r2, r2
 8003614:	62b9      	str	r1, [r7, #40]	; 0x28
 8003616:	415b      	adcs	r3, r3
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800361a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800361e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003622:	f7fd f9c7 	bl	80009b4 <__aeabi_uldivmod>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4b8c      	ldr	r3, [pc, #560]	; (800385c <UART_SetConfig+0x38c>)
 800362c:	fba3 1302 	umull	r1, r3, r3, r2
 8003630:	095b      	lsrs	r3, r3, #5
 8003632:	2164      	movs	r1, #100	; 0x64
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	3332      	adds	r3, #50	; 0x32
 800363e:	4a87      	ldr	r2, [pc, #540]	; (800385c <UART_SetConfig+0x38c>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800364c:	441e      	add	r6, r3
 800364e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003650:	4618      	mov	r0, r3
 8003652:	f04f 0100 	mov.w	r1, #0
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	1894      	adds	r4, r2, r2
 800365c:	623c      	str	r4, [r7, #32]
 800365e:	415b      	adcs	r3, r3
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
 8003662:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003666:	1812      	adds	r2, r2, r0
 8003668:	eb41 0303 	adc.w	r3, r1, r3
 800366c:	f04f 0400 	mov.w	r4, #0
 8003670:	f04f 0500 	mov.w	r5, #0
 8003674:	00dd      	lsls	r5, r3, #3
 8003676:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800367a:	00d4      	lsls	r4, r2, #3
 800367c:	4622      	mov	r2, r4
 800367e:	462b      	mov	r3, r5
 8003680:	1814      	adds	r4, r2, r0
 8003682:	653c      	str	r4, [r7, #80]	; 0x50
 8003684:	414b      	adcs	r3, r1
 8003686:	657b      	str	r3, [r7, #84]	; 0x54
 8003688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	461a      	mov	r2, r3
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	1891      	adds	r1, r2, r2
 8003694:	61b9      	str	r1, [r7, #24]
 8003696:	415b      	adcs	r3, r3
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800369e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80036a2:	f7fd f987 	bl	80009b4 <__aeabi_uldivmod>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4b6c      	ldr	r3, [pc, #432]	; (800385c <UART_SetConfig+0x38c>)
 80036ac:	fba3 1302 	umull	r1, r3, r3, r2
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	2164      	movs	r1, #100	; 0x64
 80036b4:	fb01 f303 	mul.w	r3, r1, r3
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	3332      	adds	r3, #50	; 0x32
 80036be:	4a67      	ldr	r2, [pc, #412]	; (800385c <UART_SetConfig+0x38c>)
 80036c0:	fba2 2303 	umull	r2, r3, r2, r3
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	f003 0207 	and.w	r2, r3, #7
 80036ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4432      	add	r2, r6
 80036d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036d2:	e0b9      	b.n	8003848 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036d6:	461c      	mov	r4, r3
 80036d8:	f04f 0500 	mov.w	r5, #0
 80036dc:	4622      	mov	r2, r4
 80036de:	462b      	mov	r3, r5
 80036e0:	1891      	adds	r1, r2, r2
 80036e2:	6139      	str	r1, [r7, #16]
 80036e4:	415b      	adcs	r3, r3
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80036ec:	1912      	adds	r2, r2, r4
 80036ee:	eb45 0303 	adc.w	r3, r5, r3
 80036f2:	f04f 0000 	mov.w	r0, #0
 80036f6:	f04f 0100 	mov.w	r1, #0
 80036fa:	00d9      	lsls	r1, r3, #3
 80036fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003700:	00d0      	lsls	r0, r2, #3
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	eb12 0804 	adds.w	r8, r2, r4
 800370a:	eb43 0905 	adc.w	r9, r3, r5
 800370e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	4618      	mov	r0, r3
 8003714:	f04f 0100 	mov.w	r1, #0
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	008b      	lsls	r3, r1, #2
 8003722:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003726:	0082      	lsls	r2, r0, #2
 8003728:	4640      	mov	r0, r8
 800372a:	4649      	mov	r1, r9
 800372c:	f7fd f942 	bl	80009b4 <__aeabi_uldivmod>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4b49      	ldr	r3, [pc, #292]	; (800385c <UART_SetConfig+0x38c>)
 8003736:	fba3 2302 	umull	r2, r3, r3, r2
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	011e      	lsls	r6, r3, #4
 800373e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003740:	4618      	mov	r0, r3
 8003742:	f04f 0100 	mov.w	r1, #0
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	1894      	adds	r4, r2, r2
 800374c:	60bc      	str	r4, [r7, #8]
 800374e:	415b      	adcs	r3, r3
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003756:	1812      	adds	r2, r2, r0
 8003758:	eb41 0303 	adc.w	r3, r1, r3
 800375c:	f04f 0400 	mov.w	r4, #0
 8003760:	f04f 0500 	mov.w	r5, #0
 8003764:	00dd      	lsls	r5, r3, #3
 8003766:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800376a:	00d4      	lsls	r4, r2, #3
 800376c:	4622      	mov	r2, r4
 800376e:	462b      	mov	r3, r5
 8003770:	1814      	adds	r4, r2, r0
 8003772:	64bc      	str	r4, [r7, #72]	; 0x48
 8003774:	414b      	adcs	r3, r1
 8003776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4618      	mov	r0, r3
 800377e:	f04f 0100 	mov.w	r1, #0
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	008b      	lsls	r3, r1, #2
 800378c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003790:	0082      	lsls	r2, r0, #2
 8003792:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003796:	f7fd f90d 	bl	80009b4 <__aeabi_uldivmod>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	4b2f      	ldr	r3, [pc, #188]	; (800385c <UART_SetConfig+0x38c>)
 80037a0:	fba3 1302 	umull	r1, r3, r3, r2
 80037a4:	095b      	lsrs	r3, r3, #5
 80037a6:	2164      	movs	r1, #100	; 0x64
 80037a8:	fb01 f303 	mul.w	r3, r1, r3
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	3332      	adds	r3, #50	; 0x32
 80037b2:	4a2a      	ldr	r2, [pc, #168]	; (800385c <UART_SetConfig+0x38c>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037be:	441e      	add	r6, r3
 80037c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037c2:	4618      	mov	r0, r3
 80037c4:	f04f 0100 	mov.w	r1, #0
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	1894      	adds	r4, r2, r2
 80037ce:	603c      	str	r4, [r7, #0]
 80037d0:	415b      	adcs	r3, r3
 80037d2:	607b      	str	r3, [r7, #4]
 80037d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037d8:	1812      	adds	r2, r2, r0
 80037da:	eb41 0303 	adc.w	r3, r1, r3
 80037de:	f04f 0400 	mov.w	r4, #0
 80037e2:	f04f 0500 	mov.w	r5, #0
 80037e6:	00dd      	lsls	r5, r3, #3
 80037e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037ec:	00d4      	lsls	r4, r2, #3
 80037ee:	4622      	mov	r2, r4
 80037f0:	462b      	mov	r3, r5
 80037f2:	eb12 0a00 	adds.w	sl, r2, r0
 80037f6:	eb43 0b01 	adc.w	fp, r3, r1
 80037fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4618      	mov	r0, r3
 8003800:	f04f 0100 	mov.w	r1, #0
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	008b      	lsls	r3, r1, #2
 800380e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003812:	0082      	lsls	r2, r0, #2
 8003814:	4650      	mov	r0, sl
 8003816:	4659      	mov	r1, fp
 8003818:	f7fd f8cc 	bl	80009b4 <__aeabi_uldivmod>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4b0e      	ldr	r3, [pc, #56]	; (800385c <UART_SetConfig+0x38c>)
 8003822:	fba3 1302 	umull	r1, r3, r3, r2
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	2164      	movs	r1, #100	; 0x64
 800382a:	fb01 f303 	mul.w	r3, r1, r3
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	3332      	adds	r3, #50	; 0x32
 8003834:	4a09      	ldr	r2, [pc, #36]	; (800385c <UART_SetConfig+0x38c>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	f003 020f 	and.w	r2, r3, #15
 8003840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4432      	add	r2, r6
 8003846:	609a      	str	r2, [r3, #8]
}
 8003848:	bf00      	nop
 800384a:	377c      	adds	r7, #124	; 0x7c
 800384c:	46bd      	mov	sp, r7
 800384e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003852:	bf00      	nop
 8003854:	40011000 	.word	0x40011000
 8003858:	40011400 	.word	0x40011400
 800385c:	51eb851f 	.word	0x51eb851f

08003860 <__libc_init_array>:
 8003860:	b570      	push	{r4, r5, r6, lr}
 8003862:	4d0d      	ldr	r5, [pc, #52]	; (8003898 <__libc_init_array+0x38>)
 8003864:	4c0d      	ldr	r4, [pc, #52]	; (800389c <__libc_init_array+0x3c>)
 8003866:	1b64      	subs	r4, r4, r5
 8003868:	10a4      	asrs	r4, r4, #2
 800386a:	2600      	movs	r6, #0
 800386c:	42a6      	cmp	r6, r4
 800386e:	d109      	bne.n	8003884 <__libc_init_array+0x24>
 8003870:	4d0b      	ldr	r5, [pc, #44]	; (80038a0 <__libc_init_array+0x40>)
 8003872:	4c0c      	ldr	r4, [pc, #48]	; (80038a4 <__libc_init_array+0x44>)
 8003874:	f000 f820 	bl	80038b8 <_init>
 8003878:	1b64      	subs	r4, r4, r5
 800387a:	10a4      	asrs	r4, r4, #2
 800387c:	2600      	movs	r6, #0
 800387e:	42a6      	cmp	r6, r4
 8003880:	d105      	bne.n	800388e <__libc_init_array+0x2e>
 8003882:	bd70      	pop	{r4, r5, r6, pc}
 8003884:	f855 3b04 	ldr.w	r3, [r5], #4
 8003888:	4798      	blx	r3
 800388a:	3601      	adds	r6, #1
 800388c:	e7ee      	b.n	800386c <__libc_init_array+0xc>
 800388e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003892:	4798      	blx	r3
 8003894:	3601      	adds	r6, #1
 8003896:	e7f2      	b.n	800387e <__libc_init_array+0x1e>
 8003898:	08003918 	.word	0x08003918
 800389c:	08003918 	.word	0x08003918
 80038a0:	08003918 	.word	0x08003918
 80038a4:	0800391c 	.word	0x0800391c

080038a8 <memset>:
 80038a8:	4402      	add	r2, r0
 80038aa:	4603      	mov	r3, r0
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d100      	bne.n	80038b2 <memset+0xa>
 80038b0:	4770      	bx	lr
 80038b2:	f803 1b01 	strb.w	r1, [r3], #1
 80038b6:	e7f9      	b.n	80038ac <memset+0x4>

080038b8 <_init>:
 80038b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ba:	bf00      	nop
 80038bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038be:	bc08      	pop	{r3}
 80038c0:	469e      	mov	lr, r3
 80038c2:	4770      	bx	lr

080038c4 <_fini>:
 80038c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c6:	bf00      	nop
 80038c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ca:	bc08      	pop	{r3}
 80038cc:	469e      	mov	lr, r3
 80038ce:	4770      	bx	lr
